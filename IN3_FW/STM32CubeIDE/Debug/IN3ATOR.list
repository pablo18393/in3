
IN3ATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d04  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f0c  08001f0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001f0c  08001f0c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f0c  08001f0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f0c  08001f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f10  08001f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000010  08001f24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001f24  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005eaa  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001308  00000000  00000000  00025ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  000271f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00027840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000011eb  00000000  00000000  00027de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000053da  00000000  00000000  00028fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007435f  00000000  00000000  0002e3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a270c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001810  00000000  00000000  000a2788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	08001ed0 	.word	0x08001ed0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	08001ed0 	.word	0x08001ed0

08000224 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
//MX_SPI2_Init();																							//SPI INIT already done in main
//MX_GPIO_Init();																							//GPIO INIT already done in main
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022e:	4802      	ldr	r0, [pc, #8]	; (8000238 <ILI9341_SPI_Init+0x14>)
 8000230:	f001 f802 	bl	8001238 <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40011000 	.word	0x40011000

0800023c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000246:	1df9      	adds	r1, r7, #7
 8000248:	2301      	movs	r3, #1
 800024a:	2201      	movs	r2, #1
 800024c:	4803      	ldr	r0, [pc, #12]	; (800025c <ILI9341_SPI_Send+0x20>)
 800024e:	f001 fc56 	bl	8001afe <HAL_SPI_Transmit>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000002c 	.word	0x2000002c

08000260 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000270:	480b      	ldr	r0, [pc, #44]	; (80002a0 <ILI9341_Write_Command+0x40>)
 8000272:	f000 ffe1 	bl	8001238 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027c:	4809      	ldr	r0, [pc, #36]	; (80002a4 <ILI9341_Write_Command+0x44>)
 800027e:	f000 ffdb 	bl	8001238 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ffd9 	bl	800023c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800028a:	2201      	movs	r2, #1
 800028c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <ILI9341_Write_Command+0x40>)
 8000292:	f000 ffd1 	bl	8001238 <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40011000 	.word	0x40011000
 80002a4:	40010c00 	.word	0x40010c00

080002a8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b8:	480b      	ldr	r0, [pc, #44]	; (80002e8 <ILI9341_Write_Data+0x40>)
 80002ba:	f000 ffbd 	bl	8001238 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <ILI9341_Write_Data+0x44>)
 80002c6:	f000 ffb7 	bl	8001238 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ffb5 	bl	800023c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80002d2:	2201      	movs	r2, #1
 80002d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <ILI9341_Write_Data+0x44>)
 80002da:	f000 ffad 	bl	8001238 <HAL_GPIO_WritePin>
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	40011000 	.word	0x40011000

080002f0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4604      	mov	r4, r0
 80002f8:	4608      	mov	r0, r1
 80002fa:	4611      	mov	r1, r2
 80002fc:	461a      	mov	r2, r3
 80002fe:	4623      	mov	r3, r4
 8000300:	80fb      	strh	r3, [r7, #6]
 8000302:	4603      	mov	r3, r0
 8000304:	80bb      	strh	r3, [r7, #4]
 8000306:	460b      	mov	r3, r1
 8000308:	807b      	strh	r3, [r7, #2]
 800030a:	4613      	mov	r3, r2
 800030c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800030e:	202a      	movs	r0, #42	; 0x2a
 8000310:	f7ff ffa6 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	0a1b      	lsrs	r3, r3, #8
 8000318:	b29b      	uxth	r3, r3
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffc3 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000322:	88fb      	ldrh	r3, [r7, #6]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffbe 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800032c:	887b      	ldrh	r3, [r7, #2]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffb7 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800033a:	887b      	ldrh	r3, [r7, #2]
 800033c:	b2db      	uxtb	r3, r3
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ffb2 	bl	80002a8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000344:	202b      	movs	r0, #43	; 0x2b
 8000346:	f7ff ff8b 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800034a:	88bb      	ldrh	r3, [r7, #4]
 800034c:	0a1b      	lsrs	r3, r3, #8
 800034e:	b29b      	uxth	r3, r3
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ffa8 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000358:	88bb      	ldrh	r3, [r7, #4]
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ffa3 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000362:	883b      	ldrh	r3, [r7, #0]
 8000364:	0a1b      	lsrs	r3, r3, #8
 8000366:	b29b      	uxth	r3, r3
 8000368:	b2db      	uxtb	r3, r3
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff9c 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000370:	883b      	ldrh	r3, [r7, #0]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff97 	bl	80002a8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800037a:	202c      	movs	r0, #44	; 0x2c
 800037c:	f7ff ff70 	bl	8000260 <ILI9341_Write_Command>
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bd90      	pop	{r4, r7, pc}

08000388 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2104      	movs	r1, #4
 8000390:	480a      	ldr	r0, [pc, #40]	; (80003bc <ILI9341_Reset+0x34>)
 8000392:	f000 ff51 	bl	8001238 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000396:	20c8      	movs	r0, #200	; 0xc8
 8000398:	f000 fcde 	bl	8000d58 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <ILI9341_Reset+0x38>)
 80003a4:	f000 ff48 	bl	8001238 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80003a8:	20c8      	movs	r0, #200	; 0xc8
 80003aa:	f000 fcd5 	bl	8000d58 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80003ae:	2201      	movs	r2, #1
 80003b0:	2104      	movs	r1, #4
 80003b2:	4802      	ldr	r0, [pc, #8]	; (80003bc <ILI9341_Reset+0x34>)
 80003b4:	f000 ff40 	bl	8001238 <HAL_GPIO_WritePin>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40011400 	.word	0x40011400
 80003c0:	40011000 	.word	0x40011000

080003c4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80003d2:	2036      	movs	r0, #54	; 0x36
 80003d4:	f7ff ff44 	bl	8000260 <ILI9341_Write_Command>
HAL_Delay(1);
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 fcbd 	bl	8000d58 <HAL_Delay>
	
switch(screen_rotation) 
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d837      	bhi.n	8000454 <ILI9341_Set_Rotation+0x90>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <ILI9341_Set_Rotation+0x28>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000413 	.word	0x08000413
 80003f4:	08000429 	.word	0x08000429
 80003f8:	0800043f 	.word	0x0800043f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80003fc:	2048      	movs	r0, #72	; 0x48
 80003fe:	f7ff ff53 	bl	80002a8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <ILI9341_Set_Rotation+0x9c>)
 8000404:	22f0      	movs	r2, #240	; 0xf0
 8000406:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000408:	4b16      	ldr	r3, [pc, #88]	; (8000464 <ILI9341_Set_Rotation+0xa0>)
 800040a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800040e:	801a      	strh	r2, [r3, #0]
			break;
 8000410:	e021      	b.n	8000456 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000412:	2028      	movs	r0, #40	; 0x28
 8000414:	f7ff ff48 	bl	80002a8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <ILI9341_Set_Rotation+0x9c>)
 800041a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800041e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <ILI9341_Set_Rotation+0xa0>)
 8000422:	22f0      	movs	r2, #240	; 0xf0
 8000424:	801a      	strh	r2, [r3, #0]
			break;
 8000426:	e016      	b.n	8000456 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000428:	2088      	movs	r0, #136	; 0x88
 800042a:	f7ff ff3d 	bl	80002a8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <ILI9341_Set_Rotation+0x9c>)
 8000430:	22f0      	movs	r2, #240	; 0xf0
 8000432:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <ILI9341_Set_Rotation+0xa0>)
 8000436:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800043a:	801a      	strh	r2, [r3, #0]
			break;
 800043c:	e00b      	b.n	8000456 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800043e:	20e8      	movs	r0, #232	; 0xe8
 8000440:	f7ff ff32 	bl	80002a8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <ILI9341_Set_Rotation+0x9c>)
 8000446:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800044a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <ILI9341_Set_Rotation+0xa0>)
 800044e:	22f0      	movs	r2, #240	; 0xf0
 8000450:	801a      	strh	r2, [r3, #0]
			break;
 8000452:	e000      	b.n	8000456 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000454:	bf00      	nop
	}
}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000002 	.word	0x20000002
 8000464:	20000000 	.word	0x20000000

08000468 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2104      	movs	r1, #4
 8000470:	4802      	ldr	r0, [pc, #8]	; (800047c <ILI9341_Enable+0x14>)
 8000472:	f000 fee1 	bl	8001238 <HAL_GPIO_WritePin>
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40011400 	.word	0x40011400

08000480 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000484:	f7ff fff0 	bl	8000468 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000488:	f7ff fecc 	bl	8000224 <ILI9341_SPI_Init>
ILI9341_Reset();
 800048c:	f7ff ff7c 	bl	8000388 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000490:	2001      	movs	r0, #1
 8000492:	f7ff fee5 	bl	8000260 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049a:	f000 fc5d 	bl	8000d58 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800049e:	20cb      	movs	r0, #203	; 0xcb
 80004a0:	f7ff fede 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80004a4:	2039      	movs	r0, #57	; 0x39
 80004a6:	f7ff feff 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80004aa:	202c      	movs	r0, #44	; 0x2c
 80004ac:	f7ff fefc 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fef9 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80004b6:	2034      	movs	r0, #52	; 0x34
 80004b8:	f7ff fef6 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80004bc:	2002      	movs	r0, #2
 80004be:	f7ff fef3 	bl	80002a8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80004c2:	20cf      	movs	r0, #207	; 0xcf
 80004c4:	f7ff fecc 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff feed 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80004ce:	20c1      	movs	r0, #193	; 0xc1
 80004d0:	f7ff feea 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80004d4:	2030      	movs	r0, #48	; 0x30
 80004d6:	f7ff fee7 	bl	80002a8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80004da:	20e8      	movs	r0, #232	; 0xe8
 80004dc:	f7ff fec0 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80004e0:	2085      	movs	r0, #133	; 0x85
 80004e2:	f7ff fee1 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff fede 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80004ec:	2078      	movs	r0, #120	; 0x78
 80004ee:	f7ff fedb 	bl	80002a8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80004f2:	20ea      	movs	r0, #234	; 0xea
 80004f4:	f7ff feb4 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80004f8:	2000      	movs	r0, #0
 80004fa:	f7ff fed5 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff fed2 	bl	80002a8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000504:	20ed      	movs	r0, #237	; 0xed
 8000506:	f7ff feab 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f7ff fecc 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000510:	2003      	movs	r0, #3
 8000512:	f7ff fec9 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000516:	2012      	movs	r0, #18
 8000518:	f7ff fec6 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800051c:	2081      	movs	r0, #129	; 0x81
 800051e:	f7ff fec3 	bl	80002a8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000522:	20f7      	movs	r0, #247	; 0xf7
 8000524:	f7ff fe9c 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000528:	2020      	movs	r0, #32
 800052a:	f7ff febd 	bl	80002a8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800052e:	20c0      	movs	r0, #192	; 0xc0
 8000530:	f7ff fe96 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000534:	2023      	movs	r0, #35	; 0x23
 8000536:	f7ff feb7 	bl	80002a8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800053a:	20c1      	movs	r0, #193	; 0xc1
 800053c:	f7ff fe90 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000540:	2010      	movs	r0, #16
 8000542:	f7ff feb1 	bl	80002a8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000546:	20c5      	movs	r0, #197	; 0xc5
 8000548:	f7ff fe8a 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800054c:	203e      	movs	r0, #62	; 0x3e
 800054e:	f7ff feab 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000552:	2028      	movs	r0, #40	; 0x28
 8000554:	f7ff fea8 	bl	80002a8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000558:	20c7      	movs	r0, #199	; 0xc7
 800055a:	f7ff fe81 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800055e:	2086      	movs	r0, #134	; 0x86
 8000560:	f7ff fea2 	bl	80002a8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000564:	2036      	movs	r0, #54	; 0x36
 8000566:	f7ff fe7b 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800056a:	2048      	movs	r0, #72	; 0x48
 800056c:	f7ff fe9c 	bl	80002a8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000570:	203a      	movs	r0, #58	; 0x3a
 8000572:	f7ff fe75 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000576:	2055      	movs	r0, #85	; 0x55
 8000578:	f7ff fe96 	bl	80002a8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800057c:	20b1      	movs	r0, #177	; 0xb1
 800057e:	f7ff fe6f 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fe90 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000588:	2018      	movs	r0, #24
 800058a:	f7ff fe8d 	bl	80002a8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800058e:	20b6      	movs	r0, #182	; 0xb6
 8000590:	f7ff fe66 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000594:	2008      	movs	r0, #8
 8000596:	f7ff fe87 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800059a:	2082      	movs	r0, #130	; 0x82
 800059c:	f7ff fe84 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80005a0:	2027      	movs	r0, #39	; 0x27
 80005a2:	f7ff fe81 	bl	80002a8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80005a6:	20f2      	movs	r0, #242	; 0xf2
 80005a8:	f7ff fe5a 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff fe7b 	bl	80002a8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80005b2:	2026      	movs	r0, #38	; 0x26
 80005b4:	f7ff fe54 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff fe75 	bl	80002a8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80005be:	20e0      	movs	r0, #224	; 0xe0
 80005c0:	f7ff fe4e 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80005c4:	200f      	movs	r0, #15
 80005c6:	f7ff fe6f 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80005ca:	2031      	movs	r0, #49	; 0x31
 80005cc:	f7ff fe6c 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80005d0:	202b      	movs	r0, #43	; 0x2b
 80005d2:	f7ff fe69 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80005d6:	200c      	movs	r0, #12
 80005d8:	f7ff fe66 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80005dc:	200e      	movs	r0, #14
 80005de:	f7ff fe63 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80005e2:	2008      	movs	r0, #8
 80005e4:	f7ff fe60 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80005e8:	204e      	movs	r0, #78	; 0x4e
 80005ea:	f7ff fe5d 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80005ee:	20f1      	movs	r0, #241	; 0xf1
 80005f0:	f7ff fe5a 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80005f4:	2037      	movs	r0, #55	; 0x37
 80005f6:	f7ff fe57 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80005fa:	2007      	movs	r0, #7
 80005fc:	f7ff fe54 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000600:	2010      	movs	r0, #16
 8000602:	f7ff fe51 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000606:	2003      	movs	r0, #3
 8000608:	f7ff fe4e 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800060c:	200e      	movs	r0, #14
 800060e:	f7ff fe4b 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000612:	2009      	movs	r0, #9
 8000614:	f7ff fe48 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff fe45 	bl	80002a8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800061e:	20e1      	movs	r0, #225	; 0xe1
 8000620:	f7ff fe1e 	bl	8000260 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff fe3f 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800062a:	200e      	movs	r0, #14
 800062c:	f7ff fe3c 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000630:	2014      	movs	r0, #20
 8000632:	f7ff fe39 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000636:	2003      	movs	r0, #3
 8000638:	f7ff fe36 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800063c:	2011      	movs	r0, #17
 800063e:	f7ff fe33 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000642:	2007      	movs	r0, #7
 8000644:	f7ff fe30 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000648:	2031      	movs	r0, #49	; 0x31
 800064a:	f7ff fe2d 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800064e:	20c1      	movs	r0, #193	; 0xc1
 8000650:	f7ff fe2a 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000654:	2048      	movs	r0, #72	; 0x48
 8000656:	f7ff fe27 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800065a:	2008      	movs	r0, #8
 800065c:	f7ff fe24 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000660:	200f      	movs	r0, #15
 8000662:	f7ff fe21 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000666:	200c      	movs	r0, #12
 8000668:	f7ff fe1e 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800066c:	2031      	movs	r0, #49	; 0x31
 800066e:	f7ff fe1b 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000672:	2036      	movs	r0, #54	; 0x36
 8000674:	f7ff fe18 	bl	80002a8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000678:	200f      	movs	r0, #15
 800067a:	f7ff fe15 	bl	80002a8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800067e:	2011      	movs	r0, #17
 8000680:	f7ff fdee 	bl	8000260 <ILI9341_Write_Command>
HAL_Delay(120);
 8000684:	2078      	movs	r0, #120	; 0x78
 8000686:	f000 fb67 	bl	8000d58 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800068a:	2029      	movs	r0, #41	; 0x29
 800068c:	f7ff fde8 	bl	8000260 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fe97 	bl	80003c4 <ILI9341_Set_Rotation>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	466b      	mov	r3, sp
 80006aa:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006b8:	d202      	bcs.n	80006c0 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
 80006be:	e002      	b.n	80006c6 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80006c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	483e      	ldr	r0, [pc, #248]	; (80007c8 <ILI9341_Draw_Colour_Burst+0x12c>)
 80006ce:	f000 fdb3 	bl	8001238 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	483c      	ldr	r0, [pc, #240]	; (80007cc <ILI9341_Draw_Colour_Burst+0x130>)
 80006da:	f000 fdad 	bl	8001238 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80006e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006ea:	4603      	mov	r3, r0
 80006ec:	3b01      	subs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
 80006f0:	4601      	mov	r1, r0
 80006f2:	f04f 0200 	mov.w	r2, #0
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	f04f 0400 	mov.w	r4, #0
 80006fe:	00d4      	lsls	r4, r2, #3
 8000700:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000704:	00cb      	lsls	r3, r1, #3
 8000706:	4601      	mov	r1, r0
 8000708:	f04f 0200 	mov.w	r2, #0
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	f04f 0400 	mov.w	r4, #0
 8000714:	00d4      	lsls	r4, r2, #3
 8000716:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800071a:	00cb      	lsls	r3, r1, #3
 800071c:	1dc3      	adds	r3, r0, #7
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	ebad 0d03 	sub.w	sp, sp, r3
 8000726:	466b      	mov	r3, sp
 8000728:	3300      	adds	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000730:	e00e      	b.n	8000750 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000736:	4413      	add	r3, r2
 8000738:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800073c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000740:	3301      	adds	r3, #1
 8000742:	88fa      	ldrh	r2, [r7, #6]
 8000744:	b2d1      	uxtb	r1, r2
 8000746:	69ba      	ldr	r2, [r7, #24]
 8000748:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	3302      	adds	r3, #2
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	429a      	cmp	r2, r3
 8000756:	d3ec      	bcc.n	8000732 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800076c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000772:	fb01 f202 	mul.w	r2, r1, r2
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d010      	beq.n	80007a2 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000784:	e009      	b.n	800079a <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000786:	69b9      	ldr	r1, [r7, #24]
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	b29a      	uxth	r2, r3
 800078c:	230a      	movs	r3, #10
 800078e:	4810      	ldr	r0, [pc, #64]	; (80007d0 <ILI9341_Draw_Colour_Burst+0x134>)
 8000790:	f001 f9b5 	bl	8001afe <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000796:	3301      	adds	r3, #1
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800079a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d3f1      	bcc.n	8000786 <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80007a2:	69b9      	ldr	r1, [r7, #24]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	230a      	movs	r3, #10
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <ILI9341_Draw_Colour_Burst+0x134>)
 80007ac:	f001 f9a7 	bl	8001afe <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <ILI9341_Draw_Colour_Burst+0x130>)
 80007b8:	f000 fd3e 	bl	8001238 <HAL_GPIO_WritePin>
 80007bc:	46ad      	mov	sp, r5
}
 80007be:	bf00      	nop
 80007c0:	3730      	adds	r7, #48	; 0x30
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bdb0      	pop	{r4, r5, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	40011000 	.word	0x40011000
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <ILI9341_Fill_Screen+0x44>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <ILI9341_Fill_Screen+0x48>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fd7f 	bl	80002f0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <ILI9341_Fill_Screen+0x44>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ILI9341_Fill_Screen+0x48>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	fb03 f302 	mul.w	r3, r3, r2
 8000804:	461a      	mov	r2, r3
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff46 	bl	800069c <ILI9341_Draw_Colour_Burst>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000002 	.word	0x20000002
 800081c:	20000000 	.word	0x20000000

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fa35 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f819 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f000 f893 	bl	8000958 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000832:	f000 f85b 	bl	80008ec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000836:	f7ff fe23 	bl	8000480 <ILI9341_Init>
	HAL_GPIO_WritePin(TFT_LED_GPIO_Port, TFT_LED_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <main+0x3c>)
 8000840:	f000 fcfa 	bl	8001238 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
		ILI9341_Fill_Screen(WHITE);
 8000844:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000848:	f7ff ffc4 	bl	80007d4 <ILI9341_Fill_Screen>
		ILI9341_Fill_Screen(BLUE);
 800084c:	201f      	movs	r0, #31
 800084e:	f7ff ffc1 	bl	80007d4 <ILI9341_Fill_Screen>
		ILI9341_Fill_Screen(RED);
 8000852:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000856:	f7ff ffbd 	bl	80007d4 <ILI9341_Fill_Screen>
		ILI9341_Fill_Screen(WHITE);
 800085a:	e7f3      	b.n	8000844 <main+0x24>
 800085c:	40011000 	.word	0x40011000

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b090      	sub	sp, #64	; 0x40
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2228      	movs	r2, #40	; 0x28
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fb26 	bl	8001ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800089e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fcdd 	bl	8001268 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008b4:	f000 f8e6 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 ff48 	bl	8001768 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008de:	f000 f8d1 	bl	8000a84 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3740      	adds	r7, #64	; 0x40
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_SPI2_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_SPI2_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI2_Init+0x64>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI2_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI2_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI2_Init+0x64>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI2_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_SPI2_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI2_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_SPI2_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI2_Init+0x64>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_SPI2_Init+0x64>)
 800093e:	f001 f87d 	bl	8001a3c <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f89c 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000002c 	.word	0x2000002c
 8000954:	40003800 	.word	0x40003800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	4b41      	ldr	r3, [pc, #260]	; (8000a74 <MX_GPIO_Init+0x11c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a40      	ldr	r2, [pc, #256]	; (8000a74 <MX_GPIO_Init+0x11c>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <MX_GPIO_Init+0x11c>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000984:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <MX_GPIO_Init+0x11c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <MX_GPIO_Init+0x11c>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <MX_GPIO_Init+0x11c>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0320 	and.w	r3, r3, #32
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <MX_GPIO_Init+0x11c>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a34      	ldr	r2, [pc, #208]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a2e      	ldr	r2, [pc, #184]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	4829      	ldr	r0, [pc, #164]	; (8000a78 <MX_GPIO_Init+0x120>)
 80009d4:	f000 fc30 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_LED_GPIO_Port, TFT_LED_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	4826      	ldr	r0, [pc, #152]	; (8000a78 <MX_GPIO_Init+0x120>)
 80009de:	f000 fc2b 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2104      	movs	r1, #4
 80009e6:	4825      	ldr	r0, [pc, #148]	; (8000a7c <MX_GPIO_Init+0x124>)
 80009e8:	f000 fc26 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <MX_GPIO_Init+0x128>)
 80009f4:	f000 fc20 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4819      	ldr	r0, [pc, #100]	; (8000a78 <MX_GPIO_Init+0x120>)
 8000a12:	f000 faa7 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_LED_Pin */
  GPIO_InitStruct.Pin = TFT_LED_Pin;
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4812      	ldr	r0, [pc, #72]	; (8000a78 <MX_GPIO_Init+0x120>)
 8000a2e:	f000 fa99 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000a32:	2304      	movs	r3, #4
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000a4a:	f000 fa8b 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8000a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_GPIO_Init+0x128>)
 8000a68:	f000 fa7c 	bl	8000f64 <HAL_GPIO_Init>

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40011000 	.word	0x40011000
 8000a7c:	40011400 	.word	0x40011400
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_MspInit+0x5c>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_MspInit+0x5c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x5c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x5c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_MspInit+0x60>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_MspInit+0x60>)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000

08000af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <HAL_SPI_MspInit+0x8c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d131      	bne.n	8000b78 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_SPI_MspInit+0x90>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_SPI_MspInit+0x90>)
 8000b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1e:	61d3      	str	r3, [r2, #28]
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_SPI_MspInit+0x90>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_SPI_MspInit+0x90>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_SPI_MspInit+0x90>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_SPI_MspInit+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b44:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <HAL_SPI_MspInit+0x94>)
 8000b5a:	f000 fa03 	bl	8000f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_SPI_MspInit+0x94>)
 8000b74:	f000 f9f6 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40003800 	.word	0x40003800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010c00 	.word	0x40010c00

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <HardFault_Handler+0x4>

08000b9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <BusFault_Handler+0x4>

08000baa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f8a2 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <SystemInit+0x5c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <SystemInit+0x5c>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <SystemInit+0x5c>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4911      	ldr	r1, [pc, #68]	; (8000c3c <SystemInit+0x5c>)
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <SystemInit+0x60>)
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <SystemInit+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <SystemInit+0x5c>)
 8000c02:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <SystemInit+0x5c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SystemInit+0x5c>)
 8000c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c16:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <SystemInit+0x5c>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <SystemInit+0x5c>)
 8000c1e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c22:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SystemInit+0x5c>)
 8000c26:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c2a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SystemInit+0x64>)
 8000c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c32:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	f8ff0000 	.word	0xf8ff0000
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c4a:	e003      	b.n	8000c54 <LoopCopyDataInit>

08000c4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c52:	3104      	adds	r1, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c5c:	d3f6      	bcc.n	8000c4c <CopyDataInit>
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c60:	e002      	b.n	8000c68 <LoopFillZerobss>

08000c62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c64:	f842 3b04 	str.w	r3, [r2], #4

08000c68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c6c:	d3f9      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c6e:	f7ff ffb7 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f001 f901 	bl	8001e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c76:	f7ff fdd3 	bl	8000820 <main>
  bx lr
 8000c7a:	4770      	bx	lr
  ldr r3, =_sidata
 8000c7c:	08001f14 	.word	0x08001f14
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c84:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000c88:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000c8c:	20000088 	.word	0x20000088

08000c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_2_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x28>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x28>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f929 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff feee 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40022000 	.word	0x40022000

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f933 	bl	8000f4a <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f909 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000004 	.word	0x20000004
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <HAL_IncTick+0x20>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	2000000c 	.word	0x2000000c
 8000d40:	20000084 	.word	0x20000084

08000d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	20000084 	.word	0x20000084

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff fff0 	bl	8000d44 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_Delay+0x40>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffe0 	bl	8000d44 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000000c 	.word	0x2000000c

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff49 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5e 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b08b      	sub	sp, #44	; 0x2c
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e133      	b.n	80011e0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 8122 	bne.w	80011da <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d034      	beq.n	8001008 <HAL_GPIO_Init+0xa4>
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d80d      	bhi.n	8000fbe <HAL_GPIO_Init+0x5a>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d02b      	beq.n	8000ffe <HAL_GPIO_Init+0x9a>
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d804      	bhi.n	8000fb4 <HAL_GPIO_Init+0x50>
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d031      	beq.n	8001012 <HAL_GPIO_Init+0xae>
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d01c      	beq.n	8000fec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb2:	e048      	b.n	8001046 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d043      	beq.n	8001040 <HAL_GPIO_Init+0xdc>
 8000fb8:	2b11      	cmp	r3, #17
 8000fba:	d01b      	beq.n	8000ff4 <HAL_GPIO_Init+0x90>
          break;
 8000fbc:	e043      	b.n	8001046 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fbe:	4a8f      	ldr	r2, [pc, #572]	; (80011fc <HAL_GPIO_Init+0x298>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d026      	beq.n	8001012 <HAL_GPIO_Init+0xae>
 8000fc4:	4a8d      	ldr	r2, [pc, #564]	; (80011fc <HAL_GPIO_Init+0x298>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d806      	bhi.n	8000fd8 <HAL_GPIO_Init+0x74>
 8000fca:	4a8d      	ldr	r2, [pc, #564]	; (8001200 <HAL_GPIO_Init+0x29c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d020      	beq.n	8001012 <HAL_GPIO_Init+0xae>
 8000fd0:	4a8c      	ldr	r2, [pc, #560]	; (8001204 <HAL_GPIO_Init+0x2a0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d01d      	beq.n	8001012 <HAL_GPIO_Init+0xae>
          break;
 8000fd6:	e036      	b.n	8001046 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fd8:	4a8b      	ldr	r2, [pc, #556]	; (8001208 <HAL_GPIO_Init+0x2a4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d019      	beq.n	8001012 <HAL_GPIO_Init+0xae>
 8000fde:	4a8b      	ldr	r2, [pc, #556]	; (800120c <HAL_GPIO_Init+0x2a8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d016      	beq.n	8001012 <HAL_GPIO_Init+0xae>
 8000fe4:	4a8a      	ldr	r2, [pc, #552]	; (8001210 <HAL_GPIO_Init+0x2ac>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0xae>
          break;
 8000fea:	e02c      	b.n	8001046 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e028      	b.n	8001046 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e023      	b.n	8001046 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	3308      	adds	r3, #8
 8001004:	623b      	str	r3, [r7, #32]
          break;
 8001006:	e01e      	b.n	8001046 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	330c      	adds	r3, #12
 800100e:	623b      	str	r3, [r7, #32]
          break;
 8001010:	e019      	b.n	8001046 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800101a:	2304      	movs	r3, #4
 800101c:	623b      	str	r3, [r7, #32]
          break;
 800101e:	e012      	b.n	8001046 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d105      	bne.n	8001034 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001028:	2308      	movs	r3, #8
 800102a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	611a      	str	r2, [r3, #16]
          break;
 8001032:	e008      	b.n	8001046 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001034:	2308      	movs	r3, #8
 8001036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	615a      	str	r2, [r3, #20]
          break;
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2bff      	cmp	r3, #255	; 0xff
 800104a:	d801      	bhi.n	8001050 <HAL_GPIO_Init+0xec>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	e001      	b.n	8001054 <HAL_GPIO_Init+0xf0>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3304      	adds	r3, #4
 8001054:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2bff      	cmp	r3, #255	; 0xff
 800105a:	d802      	bhi.n	8001062 <HAL_GPIO_Init+0xfe>
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x104>
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	3b08      	subs	r3, #8
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	210f      	movs	r1, #15
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	401a      	ands	r2, r3
 800107a:	6a39      	ldr	r1, [r7, #32]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	431a      	orrs	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80a2 	beq.w	80011da <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <HAL_GPIO_Init+0x2b0>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <HAL_GPIO_Init+0x2b0>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b5c      	ldr	r3, [pc, #368]	; (8001214 <HAL_GPIO_Init+0x2b0>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010ae:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <HAL_GPIO_Init+0x2b4>)
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_GPIO_Init+0x2b8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x1b6>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x2bc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x1b2>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x2c0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x1ae>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x1aa>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x2c8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x1a6>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x2cc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x1a2>
 8001102:	2305      	movs	r3, #5
 8001104:	e00a      	b.n	800111c <HAL_GPIO_Init+0x1b8>
 8001106:	2306      	movs	r3, #6
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x1b8>
 800110a:	2304      	movs	r3, #4
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x1b8>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x1b8>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x1b8>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x1b8>
 800111a:	2300      	movs	r3, #0
 800111c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800112c:	493a      	ldr	r1, [pc, #232]	; (8001218 <HAL_GPIO_Init+0x2b4>)
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	493a      	ldr	r1, [pc, #232]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
 8001152:	e006      	b.n	8001162 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	43db      	mvns	r3, r3
 800115c:	4935      	ldr	r1, [pc, #212]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800115e:	4013      	ands	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	4930      	ldr	r1, [pc, #192]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
 800117a:	e006      	b.n	800118a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	43db      	mvns	r3, r3
 8001184:	492b      	ldr	r1, [pc, #172]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001186:	4013      	ands	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	4926      	ldr	r1, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	608b      	str	r3, [r1, #8]
 80011a2:	e006      	b.n	80011b2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	4921      	ldr	r1, [pc, #132]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	491c      	ldr	r1, [pc, #112]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60cb      	str	r3, [r1, #12]
 80011ca:	e006      	b.n	80011da <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4917      	ldr	r1, [pc, #92]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	3301      	adds	r3, #1
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f47f aec4 	bne.w	8000f78 <HAL_GPIO_Init+0x14>
  }
}
 80011f0:	bf00      	nop
 80011f2:	372c      	adds	r7, #44	; 0x2c
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	10210000 	.word	0x10210000
 8001200:	10110000 	.word	0x10110000
 8001204:	10120000 	.word	0x10120000
 8001208:	10310000 	.word	0x10310000
 800120c:	10320000 	.word	0x10320000
 8001210:	10220000 	.word	0x10220000
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	40010800 	.word	0x40010800
 8001220:	40010c00 	.word	0x40010c00
 8001224:	40011000 	.word	0x40011000
 8001228:	40011400 	.word	0x40011400
 800122c:	40011800 	.word	0x40011800
 8001230:	40011c00 	.word	0x40011c00
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e26c      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8087 	beq.w	8001396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001288:	4b92      	ldr	r3, [pc, #584]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b04      	cmp	r3, #4
 8001292:	d00c      	beq.n	80012ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001294:	4b8f      	ldr	r3, [pc, #572]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d112      	bne.n	80012c6 <HAL_RCC_OscConfig+0x5e>
 80012a0:	4b8c      	ldr	r3, [pc, #560]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d10b      	bne.n	80012c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ae:	4b89      	ldr	r3, [pc, #548]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d06c      	beq.n	8001394 <HAL_RCC_OscConfig+0x12c>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d168      	bne.n	8001394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e246      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x76>
 80012d0:	4b80      	ldr	r3, [pc, #512]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a7f      	ldr	r2, [pc, #508]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e02e      	b.n	800133c <HAL_RCC_OscConfig+0xd4>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x98>
 80012e6:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a7a      	ldr	r2, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b78      	ldr	r3, [pc, #480]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a77      	ldr	r2, [pc, #476]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xd4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0xbc>
 800130a:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a71      	ldr	r2, [pc, #452]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b6f      	ldr	r3, [pc, #444]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6e      	ldr	r2, [pc, #440]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xd4>
 8001324:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a6a      	ldr	r2, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a67      	ldr	r2, [pc, #412]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fcfe 	bl	8000d44 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fcfa 	bl	8000d44 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1fa      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xe4>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fcea 	bl	8000d44 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fce6 	bl	8000d44 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1e6      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x10c>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a2:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ae:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x18c>
 80013ba:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x176>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1ba      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4939      	ldr	r1, [pc, #228]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e03a      	b.n	800146a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff fc9f 	bl	8000d44 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fc9b 	bl	8000d44 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e19b      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4927      	ldr	r1, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fc7e 	bl	8000d44 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fc7a 	bl	8000d44 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e17a      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d03a      	beq.n	80014ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d019      	beq.n	80014b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_RCC_OscConfig+0x274>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7ff fc5e 	bl	8000d44 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fc5a 	bl	8000d44 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e15a      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f000 faa8 	bl	8001a00 <RCC_Delay>
 80014b0:	e01c      	b.n	80014ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_RCC_OscConfig+0x274>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b8:	f7ff fc44 	bl	8000d44 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014be:	e00f      	b.n	80014e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc40 	bl	8000d44 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d908      	bls.n	80014e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e140      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	42420000 	.word	0x42420000
 80014dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b9e      	ldr	r3, [pc, #632]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e9      	bne.n	80014c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80a6 	beq.w	8001646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b97      	ldr	r3, [pc, #604]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10d      	bne.n	8001526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b94      	ldr	r3, [pc, #592]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a93      	ldr	r2, [pc, #588]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b91      	ldr	r3, [pc, #580]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b8e      	ldr	r3, [pc, #568]	; (8001760 <HAL_RCC_OscConfig+0x4f8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b8b      	ldr	r3, [pc, #556]	; (8001760 <HAL_RCC_OscConfig+0x4f8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a8a      	ldr	r2, [pc, #552]	; (8001760 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fc01 	bl	8000d44 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fbfd 	bl	8000d44 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b64      	cmp	r3, #100	; 0x64
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0fd      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b81      	ldr	r3, [pc, #516]	; (8001760 <HAL_RCC_OscConfig+0x4f8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x312>
 800156c:	4b7b      	ldr	r3, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4a7a      	ldr	r2, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6213      	str	r3, [r2, #32]
 8001578:	e02d      	b.n	80015d6 <HAL_RCC_OscConfig+0x36e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x334>
 8001582:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a75      	ldr	r2, [pc, #468]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	4b73      	ldr	r3, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a72      	ldr	r2, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	e01c      	b.n	80015d6 <HAL_RCC_OscConfig+0x36e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0x356>
 80015a4:	4b6d      	ldr	r3, [pc, #436]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a6c      	ldr	r2, [pc, #432]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a69      	ldr	r2, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	e00b      	b.n	80015d6 <HAL_RCC_OscConfig+0x36e>
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a66      	ldr	r2, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	4b64      	ldr	r3, [pc, #400]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a63      	ldr	r2, [pc, #396]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d015      	beq.n	800160a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fbb1 	bl	8000d44 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff fbad 	bl	8000d44 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0ab      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ee      	beq.n	80015e6 <HAL_RCC_OscConfig+0x37e>
 8001608:	e014      	b.n	8001634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7ff fb9b 	bl	8000d44 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fb97 	bl	8000d44 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e095      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	4b4c      	ldr	r3, [pc, #304]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ee      	bne.n	8001612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d105      	bne.n	8001646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163a:	4b48      	ldr	r3, [pc, #288]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a47      	ldr	r2, [pc, #284]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8081 	beq.w	8001752 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001650:	4b42      	ldr	r3, [pc, #264]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d061      	beq.n	8001720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d146      	bne.n	80016f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001664:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <HAL_RCC_OscConfig+0x4fc>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb6b 	bl	8000d44 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff fb67 	bl	8000d44 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e067      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001684:	4b35      	ldr	r3, [pc, #212]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d108      	bne.n	80016ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	492d      	ldr	r1, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a19      	ldr	r1, [r3, #32]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	430b      	orrs	r3, r1
 80016be:	4927      	ldr	r1, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x4fc>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb3b 	bl	8000d44 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fb37 	bl	8000d44 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e037      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x46a>
 80016f0:	e02f      	b.n	8001752 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_RCC_OscConfig+0x4fc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb24 	bl	8000d44 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fb20 	bl	8000d44 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e020      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x498>
 800171e:	e018      	b.n	8001752 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e013      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x4f4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	429a      	cmp	r2, r3
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
 8001764:	42420060 	.word	0x42420060

08001768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0d0      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d910      	bls.n	80017ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 0207 	bic.w	r2, r3, #7
 8001792:	4965      	ldr	r1, [pc, #404]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0b8      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a58      	ldr	r2, [pc, #352]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	494d      	ldr	r1, [pc, #308]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d040      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d115      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e07f      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e073      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06b      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4936      	ldr	r1, [pc, #216]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff fa74 	bl	8000d44 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff fa70 	bl	8000d44 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e053      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d210      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0207 	bic.w	r2, r3, #7
 800189e:	4922      	ldr	r1, [pc, #136]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e032      	b.n	800191e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	490e      	ldr	r1, [pc, #56]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018f6:	f000 f821 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018fa:	4601      	mov	r1, r0
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	fa21 f303 	lsr.w	r3, r1, r3
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1cc>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1d0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f9d2 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000
 800192c:	40021000 	.word	0x40021000
 8001930:	08001efc 	.word	0x08001efc
 8001934:	20000004 	.word	0x20000004
 8001938:	20000008 	.word	0x20000008

0800193c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	b490      	push	{r4, r7}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001944:	1d3c      	adds	r4, r7, #4
 8001946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x40>
 8001976:	2b08      	cmp	r3, #8
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x46>
 800197a:	e02d      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800197e:	623b      	str	r3, [r7, #32]
      break;
 8001980:	e02d      	b.n	80019de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	0c9b      	lsrs	r3, r3, #18
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800198e:	4413      	add	r3, r2
 8001990:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001994:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c5b      	lsrs	r3, r3, #17
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ae:	4413      	add	r3, r2
 80019b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ba:	fb02 f203 	mul.w	r2, r2, r3
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
 80019c6:	e004      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	623b      	str	r3, [r7, #32]
      break;
 80019d6:	e002      	b.n	80019de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019da:	623b      	str	r3, [r7, #32]
      break;
 80019dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019de:	6a3b      	ldr	r3, [r7, #32]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc90      	pop	{r4, r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	08001ee8 	.word	0x08001ee8
 80019f0:	08001ef8 	.word	0x08001ef8
 80019f4:	40021000 	.word	0x40021000
 80019f8:	007a1200 	.word	0x007a1200
 80019fc:	003d0900 	.word	0x003d0900

08001a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <RCC_Delay+0x34>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <RCC_Delay+0x38>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0a5b      	lsrs	r3, r3, #9
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a1c:	bf00      	nop
  }
  while (Delay --);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	60fa      	str	r2, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f9      	bne.n	8001a1c <RCC_Delay+0x1c>
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000004 	.word	0x20000004
 8001a38:	10624dd3 	.word	0x10624dd3

08001a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e053      	b.n	8001af6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d106      	bne.n	8001a6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff f843 	bl	8000af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	ea42 0103 	orr.w	r1, r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	0c1a      	lsrs	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f002 0204 	and.w	r2, r2, #4
 8001ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b088      	sub	sp, #32
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_SPI_Transmit+0x22>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e11e      	b.n	8001d5e <HAL_SPI_Transmit+0x260>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b28:	f7ff f90c 	bl	8000d44 <HAL_GetTick>
 8001b2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d002      	beq.n	8001b44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b42:	e103      	b.n	8001d4c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_SPI_Transmit+0x52>
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b54:	e0fa      	b.n	8001d4c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	88fa      	ldrh	r2, [r7, #6]
 8001b74:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b9c:	d107      	bne.n	8001bae <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb8:	2b40      	cmp	r3, #64	; 0x40
 8001bba:	d007      	beq.n	8001bcc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd4:	d14b      	bne.n	8001c6e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_SPI_Transmit+0xe6>
 8001bde:	8afb      	ldrh	r3, [r7, #22]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d13e      	bne.n	8001c62 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	881a      	ldrh	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	1c9a      	adds	r2, r3, #2
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c08:	e02b      	b.n	8001c62 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d112      	bne.n	8001c3e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	1c9a      	adds	r2, r3, #2
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c3c:	e011      	b.n	8001c62 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c3e:	f7ff f881 	bl	8000d44 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d803      	bhi.n	8001c56 <HAL_SPI_Transmit+0x158>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d102      	bne.n	8001c5c <HAL_SPI_Transmit+0x15e>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c60:	e074      	b.n	8001d4c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ce      	bne.n	8001c0a <HAL_SPI_Transmit+0x10c>
 8001c6c:	e04c      	b.n	8001d08 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_SPI_Transmit+0x17e>
 8001c76:	8afb      	ldrh	r3, [r7, #22]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d140      	bne.n	8001cfe <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	330c      	adds	r3, #12
 8001c86:	7812      	ldrb	r2, [r2, #0]
 8001c88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ca2:	e02c      	b.n	8001cfe <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d113      	bne.n	8001cda <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	330c      	adds	r3, #12
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cd8:	e011      	b.n	8001cfe <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cda:	f7ff f833 	bl	8000d44 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d803      	bhi.n	8001cf2 <HAL_SPI_Transmit+0x1f4>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d102      	bne.n	8001cf8 <HAL_SPI_Transmit+0x1fa>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cfc:	e026      	b.n	8001d4c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1cd      	bne.n	8001ca4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f894 	bl	8001e3a <SPI_EndRxTxTransaction>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10a      	bne.n	8001d3c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	77fb      	strb	r3, [r7, #31]
 8001d48:	e000      	b.n	8001d4c <HAL_SPI_Transmit+0x24e>
  }

error:
 8001d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4613      	mov	r3, r2
 8001d74:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d76:	e04c      	b.n	8001e12 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7e:	d048      	beq.n	8001e12 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d80:	f7fe ffe0 	bl	8000d44 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d902      	bls.n	8001d96 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d13d      	bne.n	8001e12 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001da4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dae:	d111      	bne.n	8001dd4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db8:	d004      	beq.n	8001dc4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d107      	bne.n	8001dd4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ddc:	d10f      	bne.n	8001dfe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e00f      	b.n	8001e32 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1a3      	bne.n	8001d78 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af02      	add	r7, sp, #8
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff ff88 	bl	8001d66 <SPI_WaitFlagStateUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <__libc_init_array>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	2500      	movs	r5, #0
 8001e7c:	4e0c      	ldr	r6, [pc, #48]	; (8001eb0 <__libc_init_array+0x38>)
 8001e7e:	4c0d      	ldr	r4, [pc, #52]	; (8001eb4 <__libc_init_array+0x3c>)
 8001e80:	1ba4      	subs	r4, r4, r6
 8001e82:	10a4      	asrs	r4, r4, #2
 8001e84:	42a5      	cmp	r5, r4
 8001e86:	d109      	bne.n	8001e9c <__libc_init_array+0x24>
 8001e88:	f000 f822 	bl	8001ed0 <_init>
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	4e0a      	ldr	r6, [pc, #40]	; (8001eb8 <__libc_init_array+0x40>)
 8001e90:	4c0a      	ldr	r4, [pc, #40]	; (8001ebc <__libc_init_array+0x44>)
 8001e92:	1ba4      	subs	r4, r4, r6
 8001e94:	10a4      	asrs	r4, r4, #2
 8001e96:	42a5      	cmp	r5, r4
 8001e98:	d105      	bne.n	8001ea6 <__libc_init_array+0x2e>
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea0:	4798      	blx	r3
 8001ea2:	3501      	adds	r5, #1
 8001ea4:	e7ee      	b.n	8001e84 <__libc_init_array+0xc>
 8001ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eaa:	4798      	blx	r3
 8001eac:	3501      	adds	r5, #1
 8001eae:	e7f2      	b.n	8001e96 <__libc_init_array+0x1e>
 8001eb0:	08001f0c 	.word	0x08001f0c
 8001eb4:	08001f0c 	.word	0x08001f0c
 8001eb8:	08001f0c 	.word	0x08001f0c
 8001ebc:	08001f10 	.word	0x08001f10

08001ec0 <memset>:
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4402      	add	r2, r0
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d100      	bne.n	8001eca <memset+0xa>
 8001ec8:	4770      	bx	lr
 8001eca:	f803 1b01 	strb.w	r1, [r3], #1
 8001ece:	e7f9      	b.n	8001ec4 <memset+0x4>

08001ed0 <_init>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	bf00      	nop
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr

08001edc <_fini>:
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	bf00      	nop
 8001ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee2:	bc08      	pop	{r3}
 8001ee4:	469e      	mov	lr, r3
 8001ee6:	4770      	bx	lr
