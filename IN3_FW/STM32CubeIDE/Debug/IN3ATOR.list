
IN3ATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd0  08003cd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cd0  08003cd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cd0  08003cd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000000c  08003ce4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08003ce4  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fee3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002081  00000000  00000000  0002ff18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00031fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001070  00000000  00000000  000330f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002bf9  00000000  00000000  00034168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7bc  00000000  00000000  00036d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a08c  00000000  00000000  0004351d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd5a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a28  00000000  00000000  000cd624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003c8c 	.word	0x08003c8c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003c8c 	.word	0x08003c8c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b08c      	sub	sp, #48	; 0x30
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fe5b 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f827 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 fa75 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 8000236:	f000 fa55 	bl	80006e4 <MX_DMA_Init>
  MX_SPI2_Init();
 800023a:	f000 f8eb 	bl	8000414 <MX_SPI2_Init>
  MX_TIM8_Init();
 800023e:	f000 f979 	bl	8000534 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000242:	f000 f87b 	bl	800033c <MX_ADC1_Init>
  MX_I2C2_Init();
 8000246:	f000 f8b7 	bl	80003b8 <MX_I2C2_Init>
  MX_TIM4_Init();
 800024a:	f000 f919 	bl	8000480 <MX_TIM4_Init>
  MX_UART4_Init();
 800024e:	f000 f9f5 	bl	800063c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000252:	f000 fa1d 	bl	8000690 <MX_USART1_UART_Init>

	//ILI9341_Init(); //initial driver setup to drive ili9341

	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //humidifier
 8000256:	2104      	movs	r1, #4
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <main+0x54>)
 800025a:	f002 fdb3 	bl	8002dc4 <HAL_TIM_PWM_Start>
    //HAL_ADC_Start(&hadc1);
    //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
	HAL_GPIO_WritePin(GPIOB, TFT_LED_CTL_Pin, GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	4806      	ldr	r0, [pc, #24]	; (800027c <main+0x58>)
 8000264:	f001 ff10 	bl	8002088 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
	HAL_GPIO_WritePin(POWER_EN_GPIO_Port, POWER_EN_Pin, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800026e:	4803      	ldr	r0, [pc, #12]	; (800027c <main+0x58>)
 8000270:	f001 ff0a 	bl	8002088 <HAL_GPIO_WritePin>
while(1);
 8000274:	e7fe      	b.n	8000274 <main+0x50>
 8000276:	bf00      	nop
 8000278:	200000c0 	.word	0x200000c0
 800027c:	40010c00 	.word	0x40010c00

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b096      	sub	sp, #88	; 0x58
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fcf4 	bl	8003c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]
 80002b2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b4:	2301      	movs	r3, #1
 80002b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 f814 	bl	8002308 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002e6:	f000 fb0a 	bl	80008fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2302      	movs	r3, #2
 80002f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000300:	f107 031c 	add.w	r3, r7, #28
 8000304:	2102      	movs	r1, #2
 8000306:	4618      	mov	r0, r3
 8000308:	f002 fa7e 	bl	8002808 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000312:	f000 faf4 	bl	80008fe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000316:	2302      	movs	r3, #2
 8000318:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800031a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fc0c 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800032e:	f000 fae6 	bl	80008fe <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3758      	adds	r7, #88	; 0x58
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_ADC1_Init+0x74>)
 800034e:	4a19      	ldr	r2, [pc, #100]	; (80003b4 <MX_ADC1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_ADC1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_ADC1_Init+0x74>)
 800035a:	2201      	movs	r2, #1
 800035c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_ADC1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_ADC1_Init+0x74>)
 8000366:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800036a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_ADC1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_ADC1_Init+0x74>)
 8000374:	2201      	movs	r2, #1
 8000376:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <MX_ADC1_Init+0x74>)
 800037a:	f000 fe37 	bl	8000fec <HAL_ADC_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000384:	f000 fabb 	bl	80008fe <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000388:	2303      	movs	r3, #3
 800038a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038c:	2301      	movs	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000390:	2307      	movs	r3, #7
 8000392:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_ADC1_Init+0x74>)
 800039a:	f000 ff11 	bl	80011c0 <HAL_ADC_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003a4:	f000 faab 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000154 	.word	0x20000154
 80003b4:	40012400 	.word	0x40012400

080003b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_I2C2_Init+0x50>)
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <MX_I2C2_Init+0x54>)
 80003c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_I2C2_Init+0x50>)
 80003c4:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_I2C2_Init+0x58>)
 80003c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_I2C2_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_I2C2_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_I2C2_Init+0x50>)
 80003d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <MX_I2C2_Init+0x50>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_I2C2_Init+0x50>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <MX_I2C2_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_I2C2_Init+0x50>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_I2C2_Init+0x50>)
 80003f6:	f001 fe5f 	bl	80020b8 <HAL_I2C_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000400:	f000 fa7d 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000100 	.word	0x20000100
 800040c:	40005800 	.word	0x40005800
 8000410:	000186a0 	.word	0x000186a0

08000414 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_SPI2_Init+0x64>)
 800041a:	4a18      	ldr	r2, [pc, #96]	; (800047c <MX_SPI2_Init+0x68>)
 800041c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800041e:	4b16      	ldr	r3, [pc, #88]	; (8000478 <MX_SPI2_Init+0x64>)
 8000420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000424:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_SPI2_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_SPI2_Init+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_SPI2_Init+0x64>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_SPI2_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_SPI2_Init+0x64>)
 8000440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000444:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_SPI2_Init+0x64>)
 8000448:	2200      	movs	r2, #0
 800044a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <MX_SPI2_Init+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_SPI2_Init+0x64>)
 8000454:	2200      	movs	r2, #0
 8000456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <MX_SPI2_Init+0x64>)
 800045a:	2200      	movs	r2, #0
 800045c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_SPI2_Init+0x64>)
 8000460:	220a      	movs	r2, #10
 8000462:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <MX_SPI2_Init+0x64>)
 8000466:	f002 fc21 	bl	8002cac <HAL_SPI_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000470:	f000 fa45 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000028 	.word	0x20000028
 800047c:	40003800 	.word	0x40003800

08000480 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	; 0x28
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000486:	f107 0320 	add.w	r3, r7, #32
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_TIM4_Init+0xac>)
 80004a4:	4a22      	ldr	r2, [pc, #136]	; (8000530 <MX_TIM4_Init+0xb0>)
 80004a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80004a8:	4b20      	ldr	r3, [pc, #128]	; (800052c <MX_TIM4_Init+0xac>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_TIM4_Init+0xac>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 328;
 80004b4:	4b1d      	ldr	r3, [pc, #116]	; (800052c <MX_TIM4_Init+0xac>)
 80004b6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80004ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_TIM4_Init+0xac>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_TIM4_Init+0xac>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80004c8:	4818      	ldr	r0, [pc, #96]	; (800052c <MX_TIM4_Init+0xac>)
 80004ca:	f002 fc50 	bl	8002d6e <HAL_TIM_PWM_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80004d4:	f000 fa13 	bl	80008fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004dc:	2300      	movs	r3, #0
 80004de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004e0:	f107 0320 	add.w	r3, r7, #32
 80004e4:	4619      	mov	r1, r3
 80004e6:	4811      	ldr	r0, [pc, #68]	; (800052c <MX_TIM4_Init+0xac>)
 80004e8:	f002 ffba 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80004f2:	f000 fa04 	bl	80008fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f6:	2360      	movs	r3, #96	; 0x60
 80004f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 164;
 80004fa:	23a4      	movs	r3, #164	; 0xa4
 80004fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2204      	movs	r2, #4
 800050a:	4619      	mov	r1, r3
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <MX_TIM4_Init+0xac>)
 800050e:	f002 fc97 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000518:	f000 f9f1 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <MX_TIM4_Init+0xac>)
 800051e:	f000 fb65 	bl	8000bec <HAL_TIM_MspPostInit>

}
 8000522:	bf00      	nop
 8000524:	3728      	adds	r7, #40	; 0x28
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000c0 	.word	0x200000c0
 8000530:	40000800 	.word	0x40000800

08000534 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b092      	sub	sp, #72	; 0x48
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
 8000554:	615a      	str	r2, [r3, #20]
 8000556:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fb8c 	bl	8003c7c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <MX_TIM8_Init+0x100>)
 8000566:	4a34      	ldr	r2, [pc, #208]	; (8000638 <MX_TIM8_Init+0x104>)
 8000568:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 36;
 800056a:	4b32      	ldr	r3, [pc, #200]	; (8000634 <MX_TIM8_Init+0x100>)
 800056c:	2224      	movs	r2, #36	; 0x24
 800056e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	4b30      	ldr	r3, [pc, #192]	; (8000634 <MX_TIM8_Init+0x100>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <MX_TIM8_Init+0x100>)
 8000578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800057c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <MX_TIM8_Init+0x100>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000584:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <MX_TIM8_Init+0x100>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058a:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <MX_TIM8_Init+0x100>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000590:	4828      	ldr	r0, [pc, #160]	; (8000634 <MX_TIM8_Init+0x100>)
 8000592:	f002 fbec 	bl	8002d6e <HAL_TIM_PWM_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800059c:	f000 f9af 	bl	80008fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a0:	2300      	movs	r3, #0
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80005a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005ac:	4619      	mov	r1, r3
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <MX_TIM8_Init+0x100>)
 80005b0:	f002 ff56 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80005ba:	f000 f9a0 	bl	80008fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005be:	2360      	movs	r3, #96	; 0x60
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80005c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005cc:	2300      	movs	r3, #0
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	4813      	ldr	r0, [pc, #76]	; (8000634 <MX_TIM8_Init+0x100>)
 80005e6:	f002 fc2b 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80005f0:	f000 f985 	bl	80008fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <MX_TIM8_Init+0x100>)
 8000618:	f002 ff66 	bl	80034e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8000622:	f000 f96c 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000626:	4803      	ldr	r0, [pc, #12]	; (8000634 <MX_TIM8_Init+0x100>)
 8000628:	f000 fae0 	bl	8000bec <HAL_TIM_MspPostInit>

}
 800062c:	bf00      	nop
 800062e:	3748      	adds	r7, #72	; 0x48
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000080 	.word	0x20000080
 8000638:	40013400 	.word	0x40013400

0800063c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_UART4_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_UART4_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_UART4_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_UART4_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_UART4_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_UART4_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_UART4_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_UART4_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_UART4_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_UART4_Init+0x4c>)
 8000674:	f002 ff89 	bl	800358a <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f93e 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000208 	.word	0x20000208
 800068c:	40004c00 	.word	0x40004c00

08000690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART1_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c8:	f002 ff5f 	bl	800358a <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f914 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000184 	.word	0x20000184
 80006e0:	40013800 	.word	0x40013800

080006e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_DMA_Init+0x38>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <MX_DMA_Init+0x38>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_DMA_Init+0x38>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	200b      	movs	r0, #11
 8000708:	f000 ff63 	bl	80015d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800070c:	200b      	movs	r0, #11
 800070e:	f000 ff7c 	bl	800160a <HAL_NVIC_EnableIRQ>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	4b66      	ldr	r3, [pc, #408]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a65      	ldr	r2, [pc, #404]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b63      	ldr	r3, [pc, #396]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0310 	and.w	r3, r3, #16
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074c:	4b60      	ldr	r3, [pc, #384]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a5f      	ldr	r2, [pc, #380]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b5d      	ldr	r3, [pc, #372]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0320 	and.w	r3, r3, #32
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b5a      	ldr	r3, [pc, #360]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a59      	ldr	r2, [pc, #356]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b57      	ldr	r3, [pc, #348]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	4b54      	ldr	r3, [pc, #336]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a53      	ldr	r2, [pc, #332]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b51      	ldr	r3, [pc, #324]	; (80008d0 <MX_GPIO_Init+0x1b0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|GSM_PWRKEY_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800079a:	484e      	ldr	r0, [pc, #312]	; (80008d4 <MX_GPIO_Init+0x1b4>)
 800079c:	f001 fc74 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, JAUNDICE_CTL_Pin|BACKUP_MOSFET_Pin|POWER_EN_Pin|PULSIOXIMETER_EN_Pin 
 80007a0:	2200      	movs	r2, #0
 80007a2:	f241 3163 	movw	r1, #4963	; 0x1363
 80007a6:	484c      	ldr	r0, [pc, #304]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007a8:	f001 fc6e 	bl	8002088 <HAL_GPIO_WritePin>
                          |TFT_LED_CTL_Pin|DC_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_CTL_GPIO_Port, FAN_CTL_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	4848      	ldr	r0, [pc, #288]	; (80008d4 <MX_GPIO_Init+0x1b4>)
 80007b2:	f001 fc69 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HEATER_CTL_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80007bc:	4847      	ldr	r0, [pc, #284]	; (80008dc <MX_GPIO_Init+0x1bc>)
 80007be:	f001 fc63 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2104      	movs	r1, #4
 80007c6:	4846      	ldr	r0, [pc, #280]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 80007c8:	f001 fc5e 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin FAN_CTL_Pin */
  GPIO_InitStruct.Pin = CS_Pin|FAN_CTL_Pin;
 80007cc:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	483b      	ldr	r0, [pc, #236]	; (80008d4 <MX_GPIO_Init+0x1b4>)
 80007e6:	f001 fae5 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_PWRKEY_Pin */
  GPIO_InitStruct.Pin = GSM_PWRKEY_Pin;
 80007ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_PWRKEY_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	4834      	ldr	r0, [pc, #208]	; (80008d4 <MX_GPIO_Init+0x1b4>)
 8000804:	f001 fad6 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_IRQ_Pin ENCODER_PULSE_Pin ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin|ENCODER_PULSE_Pin|ENCODER_A_Pin|ENCODER_B_Pin;
 8000808:	f248 3320 	movw	r3, #33568	; 0x8320
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <MX_GPIO_Init+0x1c4>)
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	482d      	ldr	r0, [pc, #180]	; (80008d4 <MX_GPIO_Init+0x1b4>)
 800081e:	f001 fac9 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000822:	23e0      	movs	r3, #224	; 0xe0
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	4829      	ldr	r0, [pc, #164]	; (80008dc <MX_GPIO_Init+0x1bc>)
 8000836:	f001 fabd 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : JAUNDICE_CTL_Pin BACKUP_MOSFET_Pin POWER_EN_Pin PULSIOXIMETER_EN_Pin 
                           TFT_LED_CTL_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = JAUNDICE_CTL_Pin|BACKUP_MOSFET_Pin|POWER_EN_Pin|PULSIOXIMETER_EN_Pin 
 800083a:	f241 2363 	movw	r3, #4707	; 0x1263
 800083e:	613b      	str	r3, [r7, #16]
                          |TFT_LED_CTL_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	4821      	ldr	r0, [pc, #132]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000854:	f001 faae 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEATER_CTL_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = HEATER_CTL_Pin|SD_CS_Pin;
 8000858:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2302      	movs	r3, #2
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	481a      	ldr	r0, [pc, #104]	; (80008dc <MX_GPIO_Init+0x1bc>)
 8000872:	f001 fa9f 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000876:	2304      	movs	r3, #4
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 800088e:	f001 fa91 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_ALERT_Pin */
  GPIO_InitStruct.Pin = PWR_ALERT_Pin;
 8000892:	2310      	movs	r3, #16
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PWR_ALERT_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80008a6:	f001 fa85 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 80008aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80008c4:	f001 fa76 	bl	8001db4 <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40011000 	.word	0x40011000
 80008d8:	40010c00 	.word	0x40010c00
 80008dc:	40010800 	.word	0x40010800
 80008e0:	40011400 	.word	0x40011400
 80008e4:	10110000 	.word	0x10110000

080008e8 <HAL_UART_RxCpltCallback>:
	adc_mean /= ADC_BUF_LEN;
	printf("%lu\n", adc_mean);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(100);
 80008f0:	2064      	movs	r0, #100	; 0x64
 80008f2:	f000 fb59 	bl	8000fa8 <HAL_Delay>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
	...

0800090c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_MspInit+0x5c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_MspInit+0x5c>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_MspInit+0x5c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x5c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_MspInit+0x60>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_MspInit+0x60>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000

08000970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <HAL_ADC_MspInit+0xe8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d15f      	bne.n	8000a50 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000990:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a8:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a2b      	ldr	r2, [pc, #172]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a25      	ldr	r2, [pc, #148]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <HAL_ADC_MspInit+0xec>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	2303      	movs	r3, #3
 80009de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4619      	mov	r1, r3
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <HAL_ADC_MspInit+0xf0>)
 80009e8:	f001 f9e4 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80009ec:	230b      	movs	r3, #11
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4619      	mov	r1, r3
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <HAL_ADC_MspInit+0xf4>)
 80009fc:	f001 f9da 	bl	8001db4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <HAL_ADC_MspInit+0xfc>)
 8000a04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a36:	f000 fe03 	bl	8001640 <HAL_DMA_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000a40:	f7ff ff5d 	bl	80008fe <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a48:	621a      	str	r2, [r3, #32]
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_ADC_MspInit+0xf8>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40012400 	.word	0x40012400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40011000 	.word	0x40011000
 8000a64:	40010800 	.word	0x40010800
 8000a68:	200001c4 	.word	0x200001c4
 8000a6c:	40020008 	.word	0x40020008

08000a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <HAL_I2C_MspInit+0x74>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d124      	bne.n	8000ada <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_I2C_MspInit+0x78>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <HAL_I2C_MspInit+0x78>)
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_I2C_MspInit+0x78>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0308 	and.w	r3, r3, #8
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aae:	2312      	movs	r3, #18
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	4619      	mov	r1, r3
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <HAL_I2C_MspInit+0x7c>)
 8000abe:	f001 f979 	bl	8001db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_I2C_MspInit+0x78>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_I2C_MspInit+0x78>)
 8000ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_I2C_MspInit+0x78>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40005800 	.word	0x40005800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010c00 	.word	0x40010c00

08000af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <HAL_SPI_MspInit+0x8c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d131      	bne.n	8000b74 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <HAL_SPI_MspInit+0x90>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <HAL_SPI_MspInit+0x90>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1a:	61d3      	str	r3, [r2, #28]
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_SPI_MspInit+0x90>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_SPI_MspInit+0x90>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <HAL_SPI_MspInit+0x90>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_SPI_MspInit+0x90>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b40:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4619      	mov	r1, r3
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <HAL_SPI_MspInit+0x94>)
 8000b56:	f001 f92d 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_SPI_MspInit+0x94>)
 8000b70:	f001 f920 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40003800 	.word	0x40003800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010c00 	.word	0x40010c00

08000b88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <HAL_TIM_PWM_MspInit+0x58>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10c      	bne.n	8000bb4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000bb2:	e010      	b.n	8000bd6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_TIM_PWM_MspInit+0x60>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40000800 	.word	0x40000800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40013400 	.word	0x40013400

08000bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1e      	ldr	r2, [pc, #120]	; (8000c80 <HAL_TIM_MspPostInit+0x94>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d118      	bne.n	8000c3e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_TIM_MspPostInit+0x98>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <HAL_TIM_MspPostInit+0x98>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_TIM_MspPostInit+0x98>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = HUMIDIFIER_CTL_Pin;
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HUMIDIFIER_CTL_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4814      	ldr	r0, [pc, #80]	; (8000c88 <HAL_TIM_MspPostInit+0x9c>)
 8000c38:	f001 f8bc 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000c3c:	e01c      	b.n	8000c78 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM8)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_TIM_MspPostInit+0xa0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d117      	bne.n	8000c78 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_TIM_MspPostInit+0x98>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_TIM_MspPostInit+0x98>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_TIM_MspPostInit+0x98>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4619      	mov	r1, r3
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <HAL_TIM_MspPostInit+0xa4>)
 8000c74:	f001 f89e 	bl	8001db4 <HAL_GPIO_Init>
}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40000800 	.word	0x40000800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40013400 	.word	0x40013400
 8000c90:	40011000 	.word	0x40011000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a3c      	ldr	r2, [pc, #240]	; (8000da0 <HAL_UART_MspInit+0x10c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d132      	bne.n	8000d1a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000cb6:	69db      	ldr	r3, [r3, #28]
 8000cb8:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000cba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cbe:	61d3      	str	r3, [r2, #28]
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a34      	ldr	r2, [pc, #208]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 0318 	add.w	r3, r7, #24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	482b      	ldr	r0, [pc, #172]	; (8000da8 <HAL_UART_MspInit+0x114>)
 8000cfa:	f001 f85b 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4825      	ldr	r0, [pc, #148]	; (8000da8 <HAL_UART_MspInit+0x114>)
 8000d14:	f001 f84e 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d18:	e03e      	b.n	8000d98 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <HAL_UART_MspInit+0x118>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d139      	bne.n	8000d98 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_UART_MspInit+0x110>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x11c>)
 8000d6a:	f001 f823 	bl	8001db4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4619      	mov	r1, r3
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <HAL_UART_MspInit+0x11c>)
 8000d84:	f001 f816 	bl	8001db4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2025      	movs	r0, #37	; 0x25
 8000d8e:	f000 fc20 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d92:	2025      	movs	r0, #37	; 0x25
 8000d94:	f000 fc39 	bl	800160a <HAL_NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40004c00 	.word	0x40004c00
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40013800 	.word	0x40013800
 8000db0:	40010800 	.word	0x40010800

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f8b6 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <DMA1_Channel1_IRQHandler+0x10>)
 8000e0e:	f000 fd95 	bl	800193c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200001c4 	.word	0x200001c4

08000e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <USART1_IRQHandler+0x10>)
 8000e22:	f002 fbff 	bl	8003624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000184 	.word	0x20000184

08000e30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <SystemInit+0x5c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <SystemInit+0x5c>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <SystemInit+0x5c>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	4911      	ldr	r1, [pc, #68]	; (8000e8c <SystemInit+0x5c>)
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <SystemInit+0x60>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <SystemInit+0x5c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <SystemInit+0x5c>)
 8000e52:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <SystemInit+0x5c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SystemInit+0x5c>)
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x5c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <SystemInit+0x5c>)
 8000e6e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e72:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SystemInit+0x5c>)
 8000e76:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e7a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SystemInit+0x64>)
 8000e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e82:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	f8ff0000 	.word	0xf8ff0000
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e9a:	e003      	b.n	8000ea4 <LoopCopyDataInit>

08000e9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ea0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ea2:	3104      	adds	r1, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ea8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000eac:	d3f6      	bcc.n	8000e9c <CopyDataInit>
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000eb0:	e002      	b.n	8000eb8 <LoopFillZerobss>

08000eb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000eb4:	f842 3b04 	str.w	r3, [r2], #4

08000eb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ebc:	d3f9      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ebe:	f7ff ffb7 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f002 feb7 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec6:	f7ff f9ad 	bl	8000224 <main>
  bx lr
 8000eca:	4770      	bx	lr
  ldr r3, =_sidata
 8000ecc:	08003cd8 	.word	0x08003cd8
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ed4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000edc:	2000034c 	.word	0x2000034c

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x28>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x28>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 fb61 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fd04 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fb79 	bl	8001626 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 fb41 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000348 	.word	0x20000348

08000f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	20000348 	.word	0x20000348

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_Delay+0x40>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffe0 	bl	8000f94 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000008 	.word	0x20000008

08000fec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0ce      	b.n	80011ac <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	2b00      	cmp	r3, #0
 800101a:	d109      	bne.n	8001030 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fca0 	bl	8000970 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f9bd 	bl	80013b0 <ADC_ConversionStop_Disable>
 8001036:	4603      	mov	r3, r0
 8001038:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 80a9 	bne.w	800119a <HAL_ADC_Init+0x1ae>
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 80a5 	bne.w	800119a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	f043 0202 	orr.w	r2, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4951      	ldr	r1, [pc, #324]	; (80011b4 <HAL_ADC_Init+0x1c8>)
 800106e:	428b      	cmp	r3, r1
 8001070:	d10a      	bne.n	8001088 <HAL_ADC_Init+0x9c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800107a:	d002      	beq.n	8001082 <HAL_ADC_Init+0x96>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	e004      	b.n	800108c <HAL_ADC_Init+0xa0>
 8001082:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001086:	e001      	b.n	800108c <HAL_ADC_Init+0xa0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800108c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7b1b      	ldrb	r3, [r3, #12]
 8001092:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001094:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	4313      	orrs	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a4:	d003      	beq.n	80010ae <HAL_ADC_Init+0xc2>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <HAL_ADC_Init+0xc8>
 80010ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b2:	e000      	b.n	80010b6 <HAL_ADC_Init+0xca>
 80010b4:	2300      	movs	r3, #0
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7d1b      	ldrb	r3, [r3, #20]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d119      	bne.n	80010f8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7b1b      	ldrb	r3, [r3, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d109      	bne.n	80010e0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	035a      	lsls	r2, r3, #13
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	e00b      	b.n	80010f8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	f043 0220 	orr.w	r2, r3, #32
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	430a      	orrs	r2, r1
 800110a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_ADC_Init+0x1cc>)
 8001114:	4013      	ands	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	430b      	orrs	r3, r1
 800111e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001128:	d003      	beq.n	8001132 <HAL_ADC_Init+0x146>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d104      	bne.n	800113c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	3b01      	subs	r3, #1
 8001138:	051b      	lsls	r3, r3, #20
 800113a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	430a      	orrs	r2, r1
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_ADC_Init+0x1d0>)
 8001158:	4013      	ands	r3, r2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d10b      	bne.n	8001178 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	f023 0303 	bic.w	r3, r3, #3
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001176:	e018      	b.n	80011aa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f023 0312 	bic.w	r3, r3, #18
 8001180:	f043 0210 	orr.w	r2, r3, #16
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001198:	e007      	b.n	80011aa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119e:	f043 0210 	orr.w	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013c00 	.word	0x40013c00
 80011b8:	ffe1f7fd 	.word	0xffe1f7fd
 80011bc:	ff1f0efe 	.word	0xff1f0efe

080011c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x20>
 80011dc:	2302      	movs	r3, #2
 80011de:	e0dc      	b.n	800139a <HAL_ADC_ConfigChannel+0x1da>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d81c      	bhi.n	800122a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	3b05      	subs	r3, #5
 8001202:	221f      	movs	r2, #31
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	4019      	ands	r1, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b05      	subs	r3, #5
 800121c:	fa00 f203 	lsl.w	r2, r0, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
 8001228:	e03c      	b.n	80012a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b0c      	cmp	r3, #12
 8001230:	d81c      	bhi.n	800126c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b23      	subs	r3, #35	; 0x23
 8001244:	221f      	movs	r2, #31
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	4019      	ands	r1, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b23      	subs	r3, #35	; 0x23
 800125e:	fa00 f203 	lsl.w	r2, r0, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
 800126a:	e01b      	b.n	80012a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b41      	subs	r3, #65	; 0x41
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4019      	ands	r1, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b41      	subs	r3, #65	; 0x41
 8001298:	fa00 f203 	lsl.w	r2, r0, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d91c      	bls.n	80012e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68d9      	ldr	r1, [r3, #12]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	3b1e      	subs	r3, #30
 80012be:	2207      	movs	r2, #7
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4019      	ands	r1, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6898      	ldr	r0, [r3, #8]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	3b1e      	subs	r3, #30
 80012d8:	fa00 f203 	lsl.w	r2, r0, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	e019      	b.n	800131a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6919      	ldr	r1, [r3, #16]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4019      	ands	r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6898      	ldr	r0, [r3, #8]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b10      	cmp	r3, #16
 8001320:	d003      	beq.n	800132a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001326:	2b11      	cmp	r3, #17
 8001328:	d132      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d125      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d126      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001350:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d11a      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_ADC_ConfigChannel+0x1ec>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	0c9a      	lsrs	r2, r3, #18
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001370:	e002      	b.n	8001378 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3b01      	subs	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f9      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x1b2>
 800137e:	e007      	b.n	8001390 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	f043 0220 	orr.w	r2, r3, #32
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40012400 	.word	0x40012400
 80013a8:	20000000 	.word	0x20000000
 80013ac:	431bde83 	.word	0x431bde83

080013b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d127      	bne.n	800141a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013da:	f7ff fddb 	bl	8000f94 <HAL_GetTick>
 80013de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013e0:	e014      	b.n	800140c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013e2:	f7ff fdd7 	bl	8000f94 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d90d      	bls.n	800140c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f043 0210 	orr.w	r2, r3, #16
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e007      	b.n	800141c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d0e3      	beq.n	80013e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4906      	ldr	r1, [pc, #24]	; (80014bc <__NVIC_EnableIRQ+0x34>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff90 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff2d 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff42 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff90 	bl	8001514 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5f 	bl	80014c0 <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff35 	bl	8001488 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e059      	b.n	800170a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_DMA_Init+0xd4>)
 800165e:	429a      	cmp	r2, r3
 8001660:	d80f      	bhi.n	8001682 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_DMA_Init+0xd8>)
 800166a:	4413      	add	r3, r2
 800166c:	4a2b      	ldr	r2, [pc, #172]	; (800171c <HAL_DMA_Init+0xdc>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	009a      	lsls	r2, r3, #2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a28      	ldr	r2, [pc, #160]	; (8001720 <HAL_DMA_Init+0xe0>)
 800167e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001680:	e00e      	b.n	80016a0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_DMA_Init+0xe4>)
 800168a:	4413      	add	r3, r2
 800168c:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_DMA_Init+0xdc>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	009a      	lsls	r2, r3, #2
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_DMA_Init+0xe8>)
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40020407 	.word	0x40020407
 8001718:	bffdfff8 	.word	0xbffdfff8
 800171c:	cccccccd 	.word	0xcccccccd
 8001720:	40020000 	.word	0x40020000
 8001724:	bffdfbf8 	.word	0xbffdfbf8
 8001728:	40020400 	.word	0x40020400

0800172c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173e:	2b02      	cmp	r3, #2
 8001740:	d005      	beq.n	800174e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2204      	movs	r2, #4
 8001746:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e0d6      	b.n	80018fc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 020e 	bic.w	r2, r2, #14
 800175c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	4b64      	ldr	r3, [pc, #400]	; (8001908 <HAL_DMA_Abort_IT+0x1dc>)
 8001776:	429a      	cmp	r2, r3
 8001778:	d958      	bls.n	800182c <HAL_DMA_Abort_IT+0x100>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a63      	ldr	r2, [pc, #396]	; (800190c <HAL_DMA_Abort_IT+0x1e0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d04f      	beq.n	8001824 <HAL_DMA_Abort_IT+0xf8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a61      	ldr	r2, [pc, #388]	; (8001910 <HAL_DMA_Abort_IT+0x1e4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d048      	beq.n	8001820 <HAL_DMA_Abort_IT+0xf4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a60      	ldr	r2, [pc, #384]	; (8001914 <HAL_DMA_Abort_IT+0x1e8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d040      	beq.n	800181a <HAL_DMA_Abort_IT+0xee>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a5e      	ldr	r2, [pc, #376]	; (8001918 <HAL_DMA_Abort_IT+0x1ec>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d038      	beq.n	8001814 <HAL_DMA_Abort_IT+0xe8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a5d      	ldr	r2, [pc, #372]	; (800191c <HAL_DMA_Abort_IT+0x1f0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d030      	beq.n	800180e <HAL_DMA_Abort_IT+0xe2>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a5b      	ldr	r2, [pc, #364]	; (8001920 <HAL_DMA_Abort_IT+0x1f4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d028      	beq.n	8001808 <HAL_DMA_Abort_IT+0xdc>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a53      	ldr	r2, [pc, #332]	; (8001908 <HAL_DMA_Abort_IT+0x1dc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d020      	beq.n	8001802 <HAL_DMA_Abort_IT+0xd6>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_DMA_Abort_IT+0x1f8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_DMA_Abort_IT+0xd2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a56      	ldr	r2, [pc, #344]	; (8001928 <HAL_DMA_Abort_IT+0x1fc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d012      	beq.n	80017fa <HAL_DMA_Abort_IT+0xce>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a54      	ldr	r2, [pc, #336]	; (800192c <HAL_DMA_Abort_IT+0x200>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00a      	beq.n	80017f4 <HAL_DMA_Abort_IT+0xc8>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a53      	ldr	r2, [pc, #332]	; (8001930 <HAL_DMA_Abort_IT+0x204>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <HAL_DMA_Abort_IT+0xc2>
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	e01b      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 80017ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f2:	e018      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 80017f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f8:	e015      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 80017fa:	2310      	movs	r3, #16
 80017fc:	e013      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 80017fe:	2301      	movs	r3, #1
 8001800:	e011      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 8001802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001806:	e00e      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 8001808:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800180c:	e00b      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 800180e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001812:	e008      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	e005      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 800181a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181e:	e002      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 8001820:	2310      	movs	r3, #16
 8001822:	e000      	b.n	8001826 <HAL_DMA_Abort_IT+0xfa>
 8001824:	2301      	movs	r3, #1
 8001826:	4a43      	ldr	r2, [pc, #268]	; (8001934 <HAL_DMA_Abort_IT+0x208>)
 8001828:	6053      	str	r3, [r2, #4]
 800182a:	e057      	b.n	80018dc <HAL_DMA_Abort_IT+0x1b0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_DMA_Abort_IT+0x1e0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d04f      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x1aa>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a35      	ldr	r2, [pc, #212]	; (8001910 <HAL_DMA_Abort_IT+0x1e4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d048      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x1a6>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a33      	ldr	r2, [pc, #204]	; (8001914 <HAL_DMA_Abort_IT+0x1e8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d040      	beq.n	80018cc <HAL_DMA_Abort_IT+0x1a0>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a32      	ldr	r2, [pc, #200]	; (8001918 <HAL_DMA_Abort_IT+0x1ec>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d038      	beq.n	80018c6 <HAL_DMA_Abort_IT+0x19a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a30      	ldr	r2, [pc, #192]	; (800191c <HAL_DMA_Abort_IT+0x1f0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d030      	beq.n	80018c0 <HAL_DMA_Abort_IT+0x194>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <HAL_DMA_Abort_IT+0x1f4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d028      	beq.n	80018ba <HAL_DMA_Abort_IT+0x18e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_DMA_Abort_IT+0x1dc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d020      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x188>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <HAL_DMA_Abort_IT+0x1f8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d019      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x184>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a29      	ldr	r2, [pc, #164]	; (8001928 <HAL_DMA_Abort_IT+0x1fc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d012      	beq.n	80018ac <HAL_DMA_Abort_IT+0x180>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a28      	ldr	r2, [pc, #160]	; (800192c <HAL_DMA_Abort_IT+0x200>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00a      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x17a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_DMA_Abort_IT+0x204>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d102      	bne.n	80018a0 <HAL_DMA_Abort_IT+0x174>
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	e01b      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a4:	e018      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018aa:	e015      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018ac:	2310      	movs	r3, #16
 80018ae:	e013      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e011      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b8:	e00e      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018be:	e00b      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c4:	e008      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	e005      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d0:	e002      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018d2:	2310      	movs	r3, #16
 80018d4:	e000      	b.n	80018d8 <HAL_DMA_Abort_IT+0x1ac>
 80018d6:	2301      	movs	r3, #1
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_DMA_Abort_IT+0x20c>)
 80018da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
    } 
  }
  return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020080 	.word	0x40020080
 800190c:	40020008 	.word	0x40020008
 8001910:	4002001c 	.word	0x4002001c
 8001914:	40020030 	.word	0x40020030
 8001918:	40020044 	.word	0x40020044
 800191c:	40020058 	.word	0x40020058
 8001920:	4002006c 	.word	0x4002006c
 8001924:	40020408 	.word	0x40020408
 8001928:	4002041c 	.word	0x4002041c
 800192c:	40020430 	.word	0x40020430
 8001930:	40020444 	.word	0x40020444
 8001934:	40020400 	.word	0x40020400
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	2204      	movs	r2, #4
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80d6 	beq.w	8001b12 <HAL_DMA_IRQHandler+0x1d6>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80d0 	beq.w	8001b12 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0204 	bic.w	r2, r2, #4
 800198e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b9b      	ldr	r3, [pc, #620]	; (8001c04 <HAL_DMA_IRQHandler+0x2c8>)
 8001998:	429a      	cmp	r2, r3
 800199a:	d958      	bls.n	8001a4e <HAL_DMA_IRQHandler+0x112>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a99      	ldr	r2, [pc, #612]	; (8001c08 <HAL_DMA_IRQHandler+0x2cc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d04f      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x10a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a98      	ldr	r2, [pc, #608]	; (8001c0c <HAL_DMA_IRQHandler+0x2d0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d048      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x106>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a96      	ldr	r2, [pc, #600]	; (8001c10 <HAL_DMA_IRQHandler+0x2d4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d040      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x100>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a95      	ldr	r2, [pc, #596]	; (8001c14 <HAL_DMA_IRQHandler+0x2d8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d038      	beq.n	8001a36 <HAL_DMA_IRQHandler+0xfa>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a93      	ldr	r2, [pc, #588]	; (8001c18 <HAL_DMA_IRQHandler+0x2dc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d030      	beq.n	8001a30 <HAL_DMA_IRQHandler+0xf4>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a92      	ldr	r2, [pc, #584]	; (8001c1c <HAL_DMA_IRQHandler+0x2e0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d028      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xee>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a89      	ldr	r2, [pc, #548]	; (8001c04 <HAL_DMA_IRQHandler+0x2c8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d020      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xe8>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a8e      	ldr	r2, [pc, #568]	; (8001c20 <HAL_DMA_IRQHandler+0x2e4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d019      	beq.n	8001a20 <HAL_DMA_IRQHandler+0xe4>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a8c      	ldr	r2, [pc, #560]	; (8001c24 <HAL_DMA_IRQHandler+0x2e8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d012      	beq.n	8001a1c <HAL_DMA_IRQHandler+0xe0>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a8b      	ldr	r2, [pc, #556]	; (8001c28 <HAL_DMA_IRQHandler+0x2ec>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00a      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xda>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a89      	ldr	r2, [pc, #548]	; (8001c2c <HAL_DMA_IRQHandler+0x2f0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d102      	bne.n	8001a10 <HAL_DMA_IRQHandler+0xd4>
 8001a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0e:	e01b      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a14:	e018      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1a:	e015      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a1c:	2340      	movs	r3, #64	; 0x40
 8001a1e:	e013      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a20:	2304      	movs	r3, #4
 8001a22:	e011      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a28:	e00e      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a2e:	e00b      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a34:	e008      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a3a:	e005      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a40:	e002      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a42:	2340      	movs	r3, #64	; 0x40
 8001a44:	e000      	b.n	8001a48 <HAL_DMA_IRQHandler+0x10c>
 8001a46:	2304      	movs	r3, #4
 8001a48:	4a79      	ldr	r2, [pc, #484]	; (8001c30 <HAL_DMA_IRQHandler+0x2f4>)
 8001a4a:	6053      	str	r3, [r2, #4]
 8001a4c:	e057      	b.n	8001afe <HAL_DMA_IRQHandler+0x1c2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6d      	ldr	r2, [pc, #436]	; (8001c08 <HAL_DMA_IRQHandler+0x2cc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d04f      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x1bc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6b      	ldr	r2, [pc, #428]	; (8001c0c <HAL_DMA_IRQHandler+0x2d0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d048      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x1b8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_DMA_IRQHandler+0x2d4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d040      	beq.n	8001aee <HAL_DMA_IRQHandler+0x1b2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a68      	ldr	r2, [pc, #416]	; (8001c14 <HAL_DMA_IRQHandler+0x2d8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d038      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x1ac>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a67      	ldr	r2, [pc, #412]	; (8001c18 <HAL_DMA_IRQHandler+0x2dc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d030      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x1a6>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_DMA_IRQHandler+0x2e0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d028      	beq.n	8001adc <HAL_DMA_IRQHandler+0x1a0>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5d      	ldr	r2, [pc, #372]	; (8001c04 <HAL_DMA_IRQHandler+0x2c8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d020      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x19a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a61      	ldr	r2, [pc, #388]	; (8001c20 <HAL_DMA_IRQHandler+0x2e4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x196>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <HAL_DMA_IRQHandler+0x2e8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d012      	beq.n	8001ace <HAL_DMA_IRQHandler+0x192>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <HAL_DMA_IRQHandler+0x2ec>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x18c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5d      	ldr	r2, [pc, #372]	; (8001c2c <HAL_DMA_IRQHandler+0x2f0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d102      	bne.n	8001ac2 <HAL_DMA_IRQHandler+0x186>
 8001abc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ac0:	e01b      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001ac2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ac6:	e018      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001acc:	e015      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001ace:	2340      	movs	r3, #64	; 0x40
 8001ad0:	e013      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e011      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001ad6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ada:	e00e      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001adc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ae0:	e00b      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001ae2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ae6:	e008      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aec:	e005      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	e002      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	e000      	b.n	8001afa <HAL_DMA_IRQHandler+0x1be>
 8001af8:	2304      	movs	r3, #4
 8001afa:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_DMA_IRQHandler+0x2f8>)
 8001afc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8136 	beq.w	8001d74 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b10:	e130      	b.n	8001d74 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2202      	movs	r2, #2
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80f8 	beq.w	8001d14 <HAL_DMA_IRQHandler+0x3d8>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80f2 	beq.w	8001d14 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10b      	bne.n	8001b56 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 020a 	bic.w	r2, r2, #10
 8001b4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_DMA_IRQHandler+0x2c8>)
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d973      	bls.n	8001c4a <HAL_DMA_IRQHandler+0x30e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <HAL_DMA_IRQHandler+0x2cc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d06a      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x306>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_DMA_IRQHandler+0x2d0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d063      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x302>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a25      	ldr	r2, [pc, #148]	; (8001c10 <HAL_DMA_IRQHandler+0x2d4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d05b      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x2fc>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <HAL_DMA_IRQHandler+0x2d8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d038      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2c0>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <HAL_DMA_IRQHandler+0x2dc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d030      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x2ba>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <HAL_DMA_IRQHandler+0x2e0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d028      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x2b4>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <HAL_DMA_IRQHandler+0x2c8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d020      	beq.n	8001bea <HAL_DMA_IRQHandler+0x2ae>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_DMA_IRQHandler+0x2e4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d019      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x2aa>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_DMA_IRQHandler+0x2e8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d012      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x2a6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_DMA_IRQHandler+0x2ec>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00a      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2a0>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_DMA_IRQHandler+0x2f0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d102      	bne.n	8001bd6 <HAL_DMA_IRQHandler+0x29a>
 8001bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd4:	e036      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bda:	e033      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be0:	e030      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001be2:	2320      	movs	r3, #32
 8001be4:	e02e      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e02c      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bee:	e029      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001bf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bf4:	e026      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfa:	e023      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c00:	e020      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001c02:	bf00      	nop
 8001c04:	40020080 	.word	0x40020080
 8001c08:	40020008 	.word	0x40020008
 8001c0c:	4002001c 	.word	0x4002001c
 8001c10:	40020030 	.word	0x40020030
 8001c14:	40020044 	.word	0x40020044
 8001c18:	40020058 	.word	0x40020058
 8001c1c:	4002006c 	.word	0x4002006c
 8001c20:	40020408 	.word	0x40020408
 8001c24:	4002041c 	.word	0x4002041c
 8001c28:	40020430 	.word	0x40020430
 8001c2c:	40020444 	.word	0x40020444
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020000 	.word	0x40020000
 8001c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3c:	e002      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e000      	b.n	8001c44 <HAL_DMA_IRQHandler+0x308>
 8001c42:	2302      	movs	r3, #2
 8001c44:	4a4e      	ldr	r2, [pc, #312]	; (8001d80 <HAL_DMA_IRQHandler+0x444>)
 8001c46:	6053      	str	r3, [r2, #4]
 8001c48:	e057      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3be>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a4d      	ldr	r2, [pc, #308]	; (8001d84 <HAL_DMA_IRQHandler+0x448>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d04f      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x3b8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	; (8001d88 <HAL_DMA_IRQHandler+0x44c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d048      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x3b4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a4a      	ldr	r2, [pc, #296]	; (8001d8c <HAL_DMA_IRQHandler+0x450>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d040      	beq.n	8001cea <HAL_DMA_IRQHandler+0x3ae>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <HAL_DMA_IRQHandler+0x454>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d038      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x3a8>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <HAL_DMA_IRQHandler+0x458>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d030      	beq.n	8001cde <HAL_DMA_IRQHandler+0x3a2>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a45      	ldr	r2, [pc, #276]	; (8001d98 <HAL_DMA_IRQHandler+0x45c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d028      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x39c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a44      	ldr	r2, [pc, #272]	; (8001d9c <HAL_DMA_IRQHandler+0x460>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d020      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x396>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a42      	ldr	r2, [pc, #264]	; (8001da0 <HAL_DMA_IRQHandler+0x464>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_DMA_IRQHandler+0x392>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a41      	ldr	r2, [pc, #260]	; (8001da4 <HAL_DMA_IRQHandler+0x468>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d012      	beq.n	8001cca <HAL_DMA_IRQHandler+0x38e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a3f      	ldr	r2, [pc, #252]	; (8001da8 <HAL_DMA_IRQHandler+0x46c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00a      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x388>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <HAL_DMA_IRQHandler+0x470>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x382>
 8001cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cbc:	e01b      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc2:	e018      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc8:	e015      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e013      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e011      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	e00e      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cdc:	e00b      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce2:	e008      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce8:	e005      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cee:	e002      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	e000      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x3ba>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	4a2e      	ldr	r2, [pc, #184]	; (8001db0 <HAL_DMA_IRQHandler+0x474>)
 8001cf8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d034      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d12:	e02f      	b.n	8001d74 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	2208      	movs	r2, #8
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d028      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x43a>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d023      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 020e 	bic.w	r2, r2, #14
 8001d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
    }
  }
  return;
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
}
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020008 	.word	0x40020008
 8001d88:	4002001c 	.word	0x4002001c
 8001d8c:	40020030 	.word	0x40020030
 8001d90:	40020044 	.word	0x40020044
 8001d94:	40020058 	.word	0x40020058
 8001d98:	4002006c 	.word	0x4002006c
 8001d9c:	40020080 	.word	0x40020080
 8001da0:	40020408 	.word	0x40020408
 8001da4:	4002041c 	.word	0x4002041c
 8001da8:	40020430 	.word	0x40020430
 8001dac:	40020444 	.word	0x40020444
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b08b      	sub	sp, #44	; 0x2c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e133      	b.n	8002030 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8122 	bne.w	800202a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d034      	beq.n	8001e58 <HAL_GPIO_Init+0xa4>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d80d      	bhi.n	8001e0e <HAL_GPIO_Init+0x5a>
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d02b      	beq.n	8001e4e <HAL_GPIO_Init+0x9a>
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d804      	bhi.n	8001e04 <HAL_GPIO_Init+0x50>
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d031      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d01c      	beq.n	8001e3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e02:	e048      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d043      	beq.n	8001e90 <HAL_GPIO_Init+0xdc>
 8001e08:	2b11      	cmp	r3, #17
 8001e0a:	d01b      	beq.n	8001e44 <HAL_GPIO_Init+0x90>
          break;
 8001e0c:	e043      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e0e:	4a8f      	ldr	r2, [pc, #572]	; (800204c <HAL_GPIO_Init+0x298>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d026      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001e14:	4a8d      	ldr	r2, [pc, #564]	; (800204c <HAL_GPIO_Init+0x298>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d806      	bhi.n	8001e28 <HAL_GPIO_Init+0x74>
 8001e1a:	4a8d      	ldr	r2, [pc, #564]	; (8002050 <HAL_GPIO_Init+0x29c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d020      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001e20:	4a8c      	ldr	r2, [pc, #560]	; (8002054 <HAL_GPIO_Init+0x2a0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01d      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
          break;
 8001e26:	e036      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e28:	4a8b      	ldr	r2, [pc, #556]	; (8002058 <HAL_GPIO_Init+0x2a4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001e2e:	4a8b      	ldr	r2, [pc, #556]	; (800205c <HAL_GPIO_Init+0x2a8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d016      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001e34:	4a8a      	ldr	r2, [pc, #552]	; (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
          break;
 8001e3a:	e02c      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e028      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e023      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	3308      	adds	r3, #8
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e01e      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e019      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e012      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	611a      	str	r2, [r3, #16]
          break;
 8001e82:	e008      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	615a      	str	r2, [r3, #20]
          break;
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2bff      	cmp	r3, #255	; 0xff
 8001e9a:	d801      	bhi.n	8001ea0 <HAL_GPIO_Init+0xec>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	e001      	b.n	8001ea4 <HAL_GPIO_Init+0xf0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	d802      	bhi.n	8001eb2 <HAL_GPIO_Init+0xfe>
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x104>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	3b08      	subs	r3, #8
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	6a39      	ldr	r1, [r7, #32]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80a2 	beq.w	800202a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee6:	4b5f      	ldr	r3, [pc, #380]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a5e      	ldr	r2, [pc, #376]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b5c      	ldr	r3, [pc, #368]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001efe:	4a5a      	ldr	r2, [pc, #360]	; (8002068 <HAL_GPIO_Init+0x2b4>)
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a51      	ldr	r2, [pc, #324]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x1b6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a50      	ldr	r2, [pc, #320]	; (8002070 <HAL_GPIO_Init+0x2bc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x1b2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4f      	ldr	r2, [pc, #316]	; (8002074 <HAL_GPIO_Init+0x2c0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1ae>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4e      	ldr	r2, [pc, #312]	; (8002078 <HAL_GPIO_Init+0x2c4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1aa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	; (800207c <HAL_GPIO_Init+0x2c8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1a6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_GPIO_Init+0x2cc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1a2>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e00a      	b.n	8001f6c <HAL_GPIO_Init+0x1b8>
 8001f56:	2306      	movs	r3, #6
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x1b8>
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x1b8>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x1b8>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x1b8>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x1b8>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6e:	f002 0203 	and.w	r2, r2, #3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7c:	493a      	ldr	r1, [pc, #232]	; (8002068 <HAL_GPIO_Init+0x2b4>)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	493a      	ldr	r1, [pc, #232]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	4935      	ldr	r1, [pc, #212]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4930      	ldr	r1, [pc, #192]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
 8001fca:	e006      	b.n	8001fda <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	492b      	ldr	r1, [pc, #172]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	4926      	ldr	r1, [pc, #152]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	4921      	ldr	r1, [pc, #132]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	491c      	ldr	r1, [pc, #112]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	60cb      	str	r3, [r1, #12]
 800201a:	e006      	b.n	800202a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	43db      	mvns	r3, r3
 8002024:	4917      	ldr	r1, [pc, #92]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002026:	4013      	ands	r3, r2
 8002028:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	3301      	adds	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	f47f aec4 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 8002040:	bf00      	nop
 8002042:	372c      	adds	r7, #44	; 0x2c
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	10210000 	.word	0x10210000
 8002050:	10110000 	.word	0x10110000
 8002054:	10120000 	.word	0x10120000
 8002058:	10310000 	.word	0x10310000
 800205c:	10320000 	.word	0x10320000
 8002060:	10220000 	.word	0x10220000
 8002064:	40021000 	.word	0x40021000
 8002068:	40010000 	.word	0x40010000
 800206c:	40010800 	.word	0x40010800
 8002070:	40010c00 	.word	0x40010c00
 8002074:	40011000 	.word	0x40011000
 8002078:	40011400 	.word	0x40011400
 800207c:	40011800 	.word	0x40011800
 8002080:	40011c00 	.word	0x40011c00
 8002084:	40010400 	.word	0x40010400

08002088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
 8002094:	4613      	mov	r3, r2
 8002096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002098:	787b      	ldrb	r3, [r7, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a4:	e003      	b.n	80020ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a6:	887b      	ldrh	r3, [r7, #2]
 80020a8:	041a      	lsls	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e10f      	b.n	80022ea <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fcc6 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	; 0x24
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020fc:	f000 fcda 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8002100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4a7b      	ldr	r2, [pc, #492]	; (80022f4 <HAL_I2C_Init+0x23c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d807      	bhi.n	800211c <HAL_I2C_Init+0x64>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <HAL_I2C_Init+0x240>)
 8002110:	4293      	cmp	r3, r2
 8002112:	bf94      	ite	ls
 8002114:	2301      	movls	r3, #1
 8002116:	2300      	movhi	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	e006      	b.n	800212a <HAL_I2C_Init+0x72>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a77      	ldr	r2, [pc, #476]	; (80022fc <HAL_I2C_Init+0x244>)
 8002120:	4293      	cmp	r3, r2
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0db      	b.n	80022ea <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a72      	ldr	r2, [pc, #456]	; (8002300 <HAL_I2C_Init+0x248>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9b      	lsrs	r3, r3, #18
 800213c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a64      	ldr	r2, [pc, #400]	; (80022f4 <HAL_I2C_Init+0x23c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d802      	bhi.n	800216c <HAL_I2C_Init+0xb4>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	3301      	adds	r3, #1
 800216a:	e009      	b.n	8002180 <HAL_I2C_Init+0xc8>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	4a63      	ldr	r2, [pc, #396]	; (8002304 <HAL_I2C_Init+0x24c>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	3301      	adds	r3, #1
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002192:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4956      	ldr	r1, [pc, #344]	; (80022f4 <HAL_I2C_Init+0x23c>)
 800219c:	428b      	cmp	r3, r1
 800219e:	d80d      	bhi.n	80021bc <HAL_I2C_Init+0x104>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e59      	subs	r1, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	bf38      	it	cc
 80021b8:	2304      	movcc	r3, #4
 80021ba:	e04f      	b.n	800225c <HAL_I2C_Init+0x1a4>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d111      	bne.n	80021e8 <HAL_I2C_Init+0x130>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	440b      	add	r3, r1
 80021d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e012      	b.n	800220e <HAL_I2C_Init+0x156>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	0099      	lsls	r1, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_Init+0x15e>
 8002212:	2301      	movs	r3, #1
 8002214:	e022      	b.n	800225c <HAL_I2C_Init+0x1a4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10e      	bne.n	800223c <HAL_I2C_Init+0x184>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1e58      	subs	r0, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	440b      	add	r3, r1
 800222c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223a:	e00f      	b.n	800225c <HAL_I2C_Init+0x1a4>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e58      	subs	r0, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	0099      	lsls	r1, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	6809      	ldr	r1, [r1, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800228a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6911      	ldr	r1, [r2, #16]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	000186a0 	.word	0x000186a0
 80022f8:	001e847f 	.word	0x001e847f
 80022fc:	003d08ff 	.word	0x003d08ff
 8002300:	431bde83 	.word	0x431bde83
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e26c      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8087 	beq.w	8002436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002328:	4b92      	ldr	r3, [pc, #584]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d00c      	beq.n	800234e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002334:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d112      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d10b      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d06c      	beq.n	8002434 <HAL_RCC_OscConfig+0x12c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d168      	bne.n	8002434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e246      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x76>
 8002370:	4b80      	ldr	r3, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7f      	ldr	r2, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e02e      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x98>
 8002386:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a77      	ldr	r2, [pc, #476]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0xbc>
 80023aa:	4b72      	ldr	r3, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a71      	ldr	r2, [pc, #452]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b6f      	ldr	r3, [pc, #444]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023c4:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a67      	ldr	r2, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fdd6 	bl	8000f94 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe fdd2 	bl	8000f94 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1fa      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xe4>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fdc2 	bl	8000f94 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fdbe 	bl	8000f94 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1e6      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x10c>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d063      	beq.n	800250a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002442:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244e:	4b49      	ldr	r3, [pc, #292]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11c      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1ba      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4939      	ldr	r1, [pc, #228]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	e03a      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fd77 	bl	8000f94 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe fd73 	bl	8000f94 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e19b      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4927      	ldr	r1, [pc, #156]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe fd56 	bl	8000f94 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ec:	f7fe fd52 	bl	8000f94 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e17a      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03a      	beq.n	800258c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d019      	beq.n	8002552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7fe fd36 	bl	8000f94 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fd32 	bl	8000f94 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e15a      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 fada 	bl	8002b04 <RCC_Delay>
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe fd1c 	bl	8000f94 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	e00f      	b.n	8002580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fd18 	bl	8000f94 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d908      	bls.n	8002580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e140      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	42420000 	.word	0x42420000
 800257c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	4b9e      	ldr	r3, [pc, #632]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e9      	bne.n	8002560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a6 	beq.w	80026e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b97      	ldr	r3, [pc, #604]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b94      	ldr	r3, [pc, #592]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a93      	ldr	r2, [pc, #588]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b91      	ldr	r3, [pc, #580]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b8e      	ldr	r3, [pc, #568]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a8a      	ldr	r2, [pc, #552]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe fcd9 	bl	8000f94 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe fcd5 	bl	8000f94 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0fd      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b81      	ldr	r3, [pc, #516]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x312>
 800260c:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e02d      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x334>
 8002622:	4b76      	ldr	r3, [pc, #472]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a75      	ldr	r2, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a72      	ldr	r2, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	e01c      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x356>
 8002644:	4b6d      	ldr	r3, [pc, #436]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a6c      	ldr	r2, [pc, #432]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a69      	ldr	r2, [pc, #420]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800265e:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a66      	ldr	r2, [pc, #408]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b64      	ldr	r3, [pc, #400]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a63      	ldr	r2, [pc, #396]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fc89 	bl	8000f94 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fc85 	bl	8000f94 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0ab      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x37e>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fc73 	bl	8000f94 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fc6f 	bl	8000f94 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e095      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b48      	ldr	r3, [pc, #288]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a47      	ldr	r2, [pc, #284]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8081 	beq.w	80027f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f0:	4b42      	ldr	r3, [pc, #264]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d061      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d146      	bne.n	8002792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fc43 	bl	8000f94 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fc3f 	bl	8000f94 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e067      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	492d      	ldr	r1, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a19      	ldr	r1, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	430b      	orrs	r3, r1
 800275e:	4927      	ldr	r1, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fc13 	bl	8000f94 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fc0f 	bl	8000f94 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e037      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x46a>
 8002790:	e02f      	b.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fbfc 	bl	8000f94 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fbf8 	bl	8000f94 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e020      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x498>
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e013      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	40007000 	.word	0x40007000
 8002804:	42420060 	.word	0x42420060

08002808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0d0      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d910      	bls.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4965      	ldr	r1, [pc, #404]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b8      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a58      	ldr	r2, [pc, #352]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800286e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a52      	ldr	r2, [pc, #328]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	494d      	ldr	r1, [pc, #308]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d040      	beq.n	8002928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d115      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e07f      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e073      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06b      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4936      	ldr	r1, [pc, #216]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7fe fb4c 	bl	8000f94 <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7fe fb48 	bl	8000f94 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e053      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 020c 	and.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1eb      	bne.n	8002900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d210      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4922      	ldr	r1, [pc, #136]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e032      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4916      	ldr	r1, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	490e      	ldr	r1, [pc, #56]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002996:	f000 f821 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800299a:	4601      	mov	r1, r0
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	fa21 f303 	lsr.w	r3, r1, r3
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1cc>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe faaa 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08003cb8 	.word	0x08003cb8
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000004 	.word	0x20000004

080029dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b490      	push	{r4, r7}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029e4:	1d3c      	adds	r4, r7, #4
 80029e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d002      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x40>
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x46>
 8002a1a:	e02d      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a1e:	623b      	str	r3, [r7, #32]
      break;
 8002a20:	e02d      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	0c9b      	lsrs	r3, r3, #18
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a2e:	4413      	add	r3, r2
 8002a30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	0c5b      	lsrs	r3, r3, #17
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a4e:	4413      	add	r3, r2
 8002a50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a5a:	fb02 f203 	mul.w	r2, r2, r3
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
 8002a66:	e004      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	623b      	str	r3, [r7, #32]
      break;
 8002a76:	e002      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a7a:	623b      	str	r3, [r7, #32]
      break;
 8002a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3728      	adds	r7, #40	; 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc90      	pop	{r4, r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	08003ca4 	.word	0x08003ca4
 8002a90:	08003cb4 	.word	0x08003cb4
 8002a94:	40021000 	.word	0x40021000
 8002a98:	007a1200 	.word	0x007a1200
 8002a9c:	003d0900 	.word	0x003d0900

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b02      	ldr	r3, [pc, #8]	; (8002ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000000 	.word	0x20000000

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab8:	f7ff fff2 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002abc:	4601      	mov	r1, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08003cc8 	.word	0x08003cc8

08002adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae0:	f7ff ffde 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4601      	mov	r1, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	0adb      	lsrs	r3, r3, #11
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af2:	5cd3      	ldrb	r3, [r2, r3]
 8002af4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08003cc8 	.word	0x08003cc8

08002b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <RCC_Delay+0x34>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <RCC_Delay+0x38>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0a5b      	lsrs	r3, r3, #9
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b20:	bf00      	nop
  }
  while (Delay --);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1e5a      	subs	r2, r3, #1
 8002b26:	60fa      	str	r2, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f9      	bne.n	8002b20 <RCC_Delay+0x1c>
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	10624dd3 	.word	0x10624dd3

08002b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d07d      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	4a4b      	ldr	r2, [pc, #300]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	61d3      	str	r3, [r2, #28]
 8002b78:	4b49      	ldr	r3, [pc, #292]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b84:	2301      	movs	r3, #1
 8002b86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d118      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f9f8 	bl	8000f94 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	e008      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe f9f4 	bl	8000f94 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e06d      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc6:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d02e      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d027      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be4:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bee:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf4:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bfa:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d014      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe f9c3 	bl	8000f94 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe f9bf 	bl	8000f94 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e036      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ee      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4917      	ldr	r1, [pc, #92]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	490b      	ldr	r1, [pc, #44]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	42420440 	.word	0x42420440

08002cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e053      	b.n	8002d66 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd ff09 	bl	8000af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	ea42 0103 	orr.w	r1, r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	0c1a      	lsrs	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f002 0204 	and.w	r2, r2, #4
 8002d44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e01d      	b.n	8002dbc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fd fef7 	bl	8000b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f000 f90d 	bl	8002fcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	6839      	ldr	r1, [r7, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fb1e 	bl	8003418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <HAL_TIM_PWM_Start+0x74>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_TIM_PWM_Start+0x2c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_TIM_PWM_Start+0x78>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_TIM_PWM_Start+0x30>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_TIM_PWM_Start+0x32>
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d007      	beq.n	8002e2c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40013400 	.word	0x40013400

08002e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e0b4      	b.n	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	f200 809f 	bhi.w	8002fb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	08002fb1 	.word	0x08002fb1
 8002e80:	08002fb1 	.word	0x08002fb1
 8002e84:	08002fb1 	.word	0x08002fb1
 8002e88:	08002eed 	.word	0x08002eed
 8002e8c:	08002fb1 	.word	0x08002fb1
 8002e90:	08002fb1 	.word	0x08002fb1
 8002e94:	08002fb1 	.word	0x08002fb1
 8002e98:	08002f2f 	.word	0x08002f2f
 8002e9c:	08002fb1 	.word	0x08002fb1
 8002ea0:	08002fb1 	.word	0x08002fb1
 8002ea4:	08002fb1 	.word	0x08002fb1
 8002ea8:	08002f6f 	.word	0x08002f6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f904 	bl	80030c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0208 	orr.w	r2, r2, #8
 8002ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0204 	bic.w	r2, r2, #4
 8002ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6999      	ldr	r1, [r3, #24]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	619a      	str	r2, [r3, #24]
      break;
 8002eea:	e062      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f954 	bl	80031a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6999      	ldr	r1, [r3, #24]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	619a      	str	r2, [r3, #24]
      break;
 8002f2c:	e041      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f9a7 	bl	8003288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0208 	orr.w	r2, r2, #8
 8002f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0204 	bic.w	r2, r2, #4
 8002f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69d9      	ldr	r1, [r3, #28]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	61da      	str	r2, [r3, #28]
      break;
 8002f6c:	e021      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f9fb 	bl	8003370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69d9      	ldr	r1, [r3, #28]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	021a      	lsls	r2, r3, #8
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	61da      	str	r2, [r3, #28]
      break;
 8002fae:	e000      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002fb0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a33      	ldr	r2, [pc, #204]	; (80030ac <TIM_Base_SetConfig+0xe0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d013      	beq.n	800300c <TIM_Base_SetConfig+0x40>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <TIM_Base_SetConfig+0xe4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00f      	beq.n	800300c <TIM_Base_SetConfig+0x40>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff2:	d00b      	beq.n	800300c <TIM_Base_SetConfig+0x40>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <TIM_Base_SetConfig+0xe8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d007      	beq.n	800300c <TIM_Base_SetConfig+0x40>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <TIM_Base_SetConfig+0xec>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0x40>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a2d      	ldr	r2, [pc, #180]	; (80030bc <TIM_Base_SetConfig+0xf0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a22      	ldr	r2, [pc, #136]	; (80030ac <TIM_Base_SetConfig+0xe0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <TIM_Base_SetConfig+0x82>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <TIM_Base_SetConfig+0xe4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00f      	beq.n	800304e <TIM_Base_SetConfig+0x82>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d00b      	beq.n	800304e <TIM_Base_SetConfig+0x82>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <TIM_Base_SetConfig+0xe8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d007      	beq.n	800304e <TIM_Base_SetConfig+0x82>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <TIM_Base_SetConfig+0xec>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d003      	beq.n	800304e <TIM_Base_SetConfig+0x82>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <TIM_Base_SetConfig+0xf0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d108      	bne.n	8003060 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <TIM_Base_SetConfig+0xe0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <TIM_Base_SetConfig+0xc8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <TIM_Base_SetConfig+0xe4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	615a      	str	r2, [r3, #20]
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40013400 	.word	0x40013400
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00

080030c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f023 0302 	bic.w	r3, r3, #2
 8003108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a20      	ldr	r2, [pc, #128]	; (8003198 <TIM_OC1_SetConfig+0xd8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_OC1_SetConfig+0x64>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a1f      	ldr	r2, [pc, #124]	; (800319c <TIM_OC1_SetConfig+0xdc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10c      	bne.n	800313e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0308 	bic.w	r3, r3, #8
 800312a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a15      	ldr	r2, [pc, #84]	; (8003198 <TIM_OC1_SetConfig+0xd8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <TIM_OC1_SetConfig+0x8e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <TIM_OC1_SetConfig+0xdc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800315c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	621a      	str	r2, [r3, #32]
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40013400 	.word	0x40013400

080031a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0210 	bic.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0320 	bic.w	r3, r3, #32
 80031ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <TIM_OC2_SetConfig+0xe0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_OC2_SetConfig+0x68>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a20      	ldr	r2, [pc, #128]	; (8003284 <TIM_OC2_SetConfig+0xe4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10d      	bne.n	8003224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800320e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a16      	ldr	r2, [pc, #88]	; (8003280 <TIM_OC2_SetConfig+0xe0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_OC2_SetConfig+0x94>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a15      	ldr	r2, [pc, #84]	; (8003284 <TIM_OC2_SetConfig+0xe4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d113      	bne.n	800325c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800323a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40012c00 	.word	0x40012c00
 8003284:	40013400 	.word	0x40013400

08003288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a21      	ldr	r2, [pc, #132]	; (8003368 <TIM_OC3_SetConfig+0xe0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_OC3_SetConfig+0x66>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a20      	ldr	r2, [pc, #128]	; (800336c <TIM_OC3_SetConfig+0xe4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10d      	bne.n	800330a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a16      	ldr	r2, [pc, #88]	; (8003368 <TIM_OC3_SetConfig+0xe0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_OC3_SetConfig+0x92>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <TIM_OC3_SetConfig+0xe4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d113      	bne.n	8003342 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	621a      	str	r2, [r3, #32]
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40012c00 	.word	0x40012c00
 800336c:	40013400 	.word	0x40013400

08003370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	031b      	lsls	r3, r3, #12
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a11      	ldr	r2, [pc, #68]	; (8003410 <TIM_OC4_SetConfig+0xa0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_OC4_SetConfig+0x68>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <TIM_OC4_SetConfig+0xa4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d109      	bne.n	80033ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40013400 	.word	0x40013400

08003418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2201      	movs	r2, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003474:	2302      	movs	r3, #2
 8003476:	e032      	b.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003500:	2302      	movs	r3, #2
 8003502:	e03d      	b.n	8003580 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e03f      	b.n	800361c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fd fb6f 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2224      	movs	r2, #36	; 0x24
 80035ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa56 	bl	8003a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003602:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10d      	bne.n	8003676 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_UART_IRQHandler+0x52>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f984 	bl	800397c <UART_Receive_IT>
      return;
 8003674:	e0cc      	b.n	8003810 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80ab 	beq.w	80037d4 <HAL_UART_IRQHandler+0x1b0>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_UART_IRQHandler+0x70>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80a0 	beq.w	80037d4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_UART_IRQHandler+0x90>
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_UART_IRQHandler+0xb0>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	f043 0202 	orr.w	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_UART_IRQHandler+0xd0>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	f043 0204 	orr.w	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_UART_IRQHandler+0xf0>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	f043 0208 	orr.w	r2, r3, #8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d078      	beq.n	800380e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <HAL_UART_IRQHandler+0x112>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f923 	bl	800397c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <HAL_UART_IRQHandler+0x13a>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d031      	beq.n	80037c2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f86e 	bl	8003840 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d023      	beq.n	80037ba <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003780:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	2b00      	cmp	r3, #0
 8003788:	d013      	beq.n	80037b2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_UART_IRQHandler+0x1f4>)
 8003790:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd ffc8 	bl	800172c <HAL_DMA_Abort_IT>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037ac:	4610      	mov	r0, r2
 80037ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	e00e      	b.n	80037d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f83b 	bl	800382e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	e00a      	b.n	80037d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f837 	bl	800382e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	e006      	b.n	80037d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f833 	bl	800382e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80037ce:	e01e      	b.n	800380e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	bf00      	nop
    return;
 80037d2:	e01c      	b.n	800380e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_UART_IRQHandler+0x1cc>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f85a 	bl	80038a2 <UART_Transmit_IT>
    return;
 80037ee:	e00f      	b.n	8003810 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_UART_IRQHandler+0x1ec>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8a1 	bl	800394c <UART_EndTransmit_IT>
    return;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <HAL_UART_IRQHandler+0x1ec>
    return;
 800380e:	bf00      	nop
  }
}
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	0800387b 	.word	0x0800387b

0800381c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003856:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff ffca 	bl	800382e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b21      	cmp	r3, #33	; 0x21
 80038b4:	d144      	bne.n	8003940 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038be:	d11a      	bne.n	80038f6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	1c9a      	adds	r2, r3, #2
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]
 80038e8:	e00e      	b.n	8003908 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	621a      	str	r2, [r3, #32]
 80038f4:	e008      	b.n	8003908 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	1c59      	adds	r1, r3, #1
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6211      	str	r1, [r2, #32]
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29b      	uxth	r3, r3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4619      	mov	r1, r3
 8003916:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800392a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff55 	bl	800381c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b22      	cmp	r3, #34	; 0x22
 800398e:	d171      	bne.n	8003a74 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003998:	d123      	bne.n	80039e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10e      	bne.n	80039c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	1c9a      	adds	r2, r3, #2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
 80039c4:	e029      	b.n	8003a1a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
 80039e0:	e01b      	b.n	8003a1a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6858      	ldr	r0, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	1c59      	adds	r1, r3, #1
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6291      	str	r1, [r2, #40]	; 0x28
 80039fa:	b2c2      	uxtb	r2, r0
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e00c      	b.n	8003a1a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	1c58      	adds	r0, r3, #1
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	6288      	str	r0, [r1, #40]	; 0x28
 8003a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4619      	mov	r1, r3
 8003a28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d120      	bne.n	8003a70 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0220 	bic.w	r2, r2, #32
 8003a3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fc ff3e 	bl	80008e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e002      	b.n	8003a76 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003aba:	f023 030c 	bic.w	r3, r3, #12
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <UART_SetConfig+0x1ac>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d14e      	bne.n	8003b86 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe fff8 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8003aec:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	4a4a      	ldr	r2, [pc, #296]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	0119      	lsls	r1, r3, #4
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009a      	lsls	r2, r3, #2
 8003b18:	441a      	add	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b24:	4b42      	ldr	r3, [pc, #264]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003b26:	fba3 0302 	umull	r0, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2064      	movs	r0, #100	; 0x64
 8003b2e:	fb00 f303 	mul.w	r3, r0, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	3332      	adds	r3, #50	; 0x32
 8003b38:	4a3d      	ldr	r2, [pc, #244]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b44:	4419      	add	r1, r3
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009a      	lsls	r2, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b5c:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2064      	movs	r0, #100	; 0x64
 8003b66:	fb00 f303 	mul.w	r3, r0, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	3332      	adds	r3, #50	; 0x32
 8003b70:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	f003 020f 	and.w	r2, r3, #15
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	440a      	add	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003b84:	e04d      	b.n	8003c22 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b86:	f7fe ff95 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8003b8a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009a      	lsls	r2, r3, #2
 8003b96:	441a      	add	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	0119      	lsls	r1, r3, #4
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009a      	lsls	r2, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003bc4:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	2064      	movs	r0, #100	; 0x64
 8003bcc:	fb00 f303 	mul.w	r3, r0, r3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	3332      	adds	r3, #50	; 0x32
 8003bd6:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be2:	4419      	add	r1, r3
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009a      	lsls	r2, r3, #2
 8003bee:	441a      	add	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003bfc:	fba3 0302 	umull	r0, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	2064      	movs	r0, #100	; 0x64
 8003c04:	fb00 f303 	mul.w	r3, r0, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	3332      	adds	r3, #50	; 0x32
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <UART_SetConfig+0x1b0>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	440a      	add	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	51eb851f 	.word	0x51eb851f

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	2500      	movs	r5, #0
 8003c38:	4e0c      	ldr	r6, [pc, #48]	; (8003c6c <__libc_init_array+0x38>)
 8003c3a:	4c0d      	ldr	r4, [pc, #52]	; (8003c70 <__libc_init_array+0x3c>)
 8003c3c:	1ba4      	subs	r4, r4, r6
 8003c3e:	10a4      	asrs	r4, r4, #2
 8003c40:	42a5      	cmp	r5, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	f000 f822 	bl	8003c8c <_init>
 8003c48:	2500      	movs	r5, #0
 8003c4a:	4e0a      	ldr	r6, [pc, #40]	; (8003c74 <__libc_init_array+0x40>)
 8003c4c:	4c0a      	ldr	r4, [pc, #40]	; (8003c78 <__libc_init_array+0x44>)
 8003c4e:	1ba4      	subs	r4, r4, r6
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	42a5      	cmp	r5, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c5c:	4798      	blx	r3
 8003c5e:	3501      	adds	r5, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c66:	4798      	blx	r3
 8003c68:	3501      	adds	r5, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	08003cd0 	.word	0x08003cd0
 8003c70:	08003cd0 	.word	0x08003cd0
 8003c74:	08003cd0 	.word	0x08003cd0
 8003c78:	08003cd4 	.word	0x08003cd4

08003c7c <memset>:
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4402      	add	r2, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
